// the 'Do It Yourself' (DIY) mod...
//witti

@init

function wittiinit() (
size = 1024;
buffer = size;
memset(buffer, 0, size+2);
buffer2 = size;
memset(buffer2, 0, size+2);

bufpos = 0;

ff1=0; ff2=0; ff3=0; ff4=0; ff5=0;
ff6=0; ff7=0; ff8=0; ff9=0; ff10=0;
hh0 = hh1 = 0;
hhf = hhq = 0; // ???

r = 0.999;
j = r * r - 1;

//itma=a;
//itma2=a2;
//otma=otma2=0;

itm1=itm2=otm1=otm2=0;
);

function wittislider() (
fParam1 = slider9; //select
fParam2 = slider10; //drive
fParam3 = slider11; //bias
fParam4 = slider12; //output
fParam5 = slider13; //stereo
fParam6 = slider14/20; //hpf freq
fParam7 = slider15; //hpf res

fParam10 = slider16; //trim
fParam11 = slider17; //lpf
fParam12 = slider18; //mix1
fParam13 = slider19; //mix2
fParam14 = slider20; //del1
fParam15 = slider21; //del2
fParam16 = slider22; //hpf

(fParam5>0.5) ? ( ster=1; ):( ster=0; );

fParam1 != old_fParam1 ? (
memset(buffer, 0, size+2);
memset(buffer2, 0, size+2);
old_fParam1 = fParam1;
);

(
fParam1 == 0 ? ( //DIY...
trim = fParam10;
lpf = fParam11;
mix1 = fParam12;
mix2 = fParam13;
del1 = fParam14;
del2 = fParam15;
hpf = fParam16;
) :
fParam1 == 1 ? ( //DI
trim = 0.5; slider16 = trim;
lpf = 18000; slider17 = lpf;
mix1 = 0; slider18 = mix1;
mix2 = 0; slider19 = mix2;
del1 = 0; slider20 = del1;
del2 = 0; slider21 = del2;
hpf = 25; slider22 = hpf;
) :
fParam1 == 2 ? ( //speaker sim
trim = 0.53; slider16 = trim;
lpf = 2700; slider17 = lpf;
mix1 = 0; sliderslider18 = mix1;
mix2 = 0; slider19 = mix2;
del1 = 0; slider20 = del1;
del2 = 0; slider21 = del2;
hpf = 382; slider22 = hpf;
) :
fParam1 == 3 ? ( //radio
trim = 1.1; slider16 = trim;
lpf = 1685; slider17 = lpf;
mix1 = -1.7; slider18 = mix1;
mix2 = 0.82; slider19 = mix2;
del1 = (srate / 6546); slider20 = del1;
del2 = (srate / 4315); slider21 = del2;
hpf = 25; slider22 = hpf;
) :
fParam1 == 4 ? ( //mesa boogie 1
trim = 0.98; slider16 = trim;
lpf = 1385; slider17 = lpf;
mix1 = -0.53; slider18 = mix1;
mix2 = 0.21; slider19 = mix2;
del1 = (srate / 7345); slider20 = del1;
del2 = (srate / 1193); slider21 = del2;
hpf = 25; slider22 = hpf;
) :
fParam1 == 5 ? ( //mesa boogie 8
trim = 0.96; slider16 = trim;
lpf = 1685; slider17 = lpf;
mix1 = -0.85; slider18 = mix1;
mix2 = 0.41; slider19 = mix2;
del1 = (srate / 6546); slider20 = del1;
del2 = (srate / 3315); slider21 = del2;
hpf = 25; slider22 = hpf;
) :
fParam1 == 6 ? ( //marshall 4x2 celestion
trim = 0.59; slider16 = trim;
lpf = 2795; slider17 = lpf;
mix1 = -0.29; slider18 = mix1;
mix2 = 0.38; slider19 = mix2;
del1 = (srate / 982); slider20 = del1;
del2 = (srate / 2402); slider21 = del2;
hpf = 459; slider22 = hpf;
) :
fParam1 == 7 ? ( //scooped-out metal 4x12
trim = 0.30; slider16 = trim;
lpf = 1744; slider17 = lpf;
mix1 = -0.96; slider18 = mix1;
mix2 = 1.6; slider19 = mix2;
del1 = (srate / 356); slider20 = del1;
del2 = (srate / 1263); slider21 = del2;
hpf = 382; slider22 = hpf;
);
);

mode = (fParam2<0.5) ? 1 : 0;

(mode) ? ( //soft clipping
drive = pow(10, 2 - 6 * fParam2);
trim *= min(0.55 + 150 * pow(fParam2,4),10);
):( //hard clipping
drive = 1;
clip = 11.7 - 16*fParam2;
(fParam2>0.7) ? (
drive = pow(10, 7*fParam2 - 4.9);
clip = 0.5;
);
);

//bias = 1.2 * fParam3 - 0.6;
bias = 0.1 * fParam3 - 0.05;

(fParam2>0.5) ? (
bias /= (1 + 3 * (fParam2-0.5));
):(
bias /= (1 + 3 * (0.5-fParam2));
);
trim *= pow(10, 2*fParam4 - 1);
(ster) ? trim *=2;

hhf = fParam6;
hhq = 1.1 - fParam7;
(fParam6>0.025) ? drive = drive * (1 + 0.1 * drive);

k0 = (2 - 2 * r * r * cos(0.647 * lpf /srate )); //lowpass filter
filterlp = ((sqrt(k0*k0 - 4*j*j) - k0) / (2*j));

k1 = (2 - 2 * r * r * cos(0.647 * hpf /srate )); //highpass filter
filterhp = ((sqrt(k1*k1 - 4*j*j) - k1) / (2*j));
);

function wittisample() (
o=filterlp;
i=1-filterlp;
o2=filterhp;

f1=ff1;
f2=ff2;
f3=ff3;
f4=ff4;
f5=ff5;
f6=ff6;
f7=ff7;
f8=ff8;
f9=ff9;
f10=ff10;

hf0=hhf;
hf1=hhf;
hq0=hhq;
hq1=hhq;
h00=hh0;
h01=hh0;
h10=hh1;
h11=hh1;

bp = bufpos;

trm = trim * i * i * i * i;

in0 = spl0;
in1 = spl1;

(ster == 1) ? ( //stereo

a = drive * (2 * in0 + bias) * 0.707;
a2 = drive * (2 * in1 + bias) * 0.707;

//otma=0.999*otma + a - itma; itma=a; a=otma;
//otma2=0.999*otma2 + a2 - itma2; itma2=a2; a2=otma2;

(mode) ? ( //softclip
b = (a>0) ? a : -a;
b2 = (a2>0) ? a2 : -a2;
b = a / (1 + b);
b2 = a2 / (1+ b2);
):( //distort
b = (a>clip) ? clip : a;
b2 = (a2>clip) ? clip : a2;
b = (a<-clip) ? -clip : b;
b2 = (a2<-clip) ? -clip : b2;
);

h00 += hf0 * (h10 + b); //resonant highpass
h10 -= hf0 * (h00 + hq0 * h10);
b += h10;

h01 += hf1 * (h11 + b2); //resonant highpass
h11 -= hf1 * (h01 + hq1 * h11);
b2 += h11;

buf[buffer + bp] = b;
buf2[buffer2 + bp] = b2;
b += (mix1* buf[buffer+((bp+del1)%1000)]) + (mix2* buf[buffer+((bp+del2)%1000)]);
b2 += (mix1* buf2[buffer2+((bp+del1)%1000)]) + (mix2* buf2[buffer2+((bp+del2)%1000)]);

f1 = o * f1 + trm * b; f6 = o * f6 + trm * b2; //-24dB/oct filter
f2 = o * f2 +  f1; f7 = o * f7 +  f6;
f3 = o * f3 +  f2; f8 = o * f8 +  f7;
f4 = o * f4 +  f3; f9 = o * f9 +  f8;

f5 = o2 * (f5 - f4) + f4; f10 = o2 * (f10 - f9) + f9; //highpass
b = f4 - f5; b2 = f9 - f10;

//(bp==0) ? bufpos = 999 : bufpos= bp - 1; //buffer position
bp = (bp==0) ? 999 : bp - 1; //buffer position

out0 = b * 0.5;
out1 = b2 * 0.5;

):( //mono

a = drive * (in0 + in1 + bias) * 0.707;

//otma=0.999*otma + a - itma; itma=a; a=otma;

(mode) ? ( //soft clip
b = (a>0) ? a : -a;
b = a / (1 + b);
):( //distort
b = (a>clip) ? clip : a;
b = (a<-clip) ? -clip : b;
);

h00 += hf0 * (h10 + b); //resonant highpass
h10 -= hf0 * (h00 + hq0 * h10);
b += h10;

buf[buffer + bp] = b;
b += (mix1* buf[buffer+((bp+del1)%1000)]) + (mix2* buf[buffer+((bp+del2)%1000)]);

f1 = o * f1 + trm * b; //-24dB/oct filter
f2 = o * f2 +  f1;
f3 = o * f3 +  f2;
f4 = o * f4 +  f3;

f5 = o2 * (f5 - f4) + f4; //highpass
b = f4 - f5;

bp = (bp==0) ? 999 : bp - 1; //buffer position

out0 = b;
out1 = b;

);

bufpos = bp;

spl0 = out0;
spl1 = out1;

otm1=0.999*otm1 + spl0 - itm1; itm1=spl0; spl0=otm1;
otm2=0.999*otm2 + spl1 - itm2; itm2=spl1; spl1=otm2;

(abs(f1)<0.0000000001) ? ( ff1=0; ff2=0; ff3=0; ff4=0; ff5=0; ):( ff1=f1; ff2=f2; ff3=f3; ff4=f4; ff5=f5; );
(abs(f6)<0.0000000001) ? ( ff6=0; ff7=0; ff8=0; ff9=0; ff10=0; ):( ff6=f6; ff7=f7; ff8=f8; ff9=f9; ff10=f10; );
(abs(h00)<0.0000000001) ? ( hh0 = hh1 = 0; ):( hh0=h00; hh1=h10; );
);

function wittigfx() (
        ui_split_leftratio(1/3);
            ui_split_topratio(1/2);
                sprintf(#selector_text, "%s", 
                        slider9 == 0 ? ("DIY") : 
                        slider9 == 1 ? ("DI") : 
                        slider9 == 2 ? ("speaker") :
                        slider9 == 3 ? ("radio") :
                        slider9 == 4 ? ("mesa") :
                        slider9 == 5 ? ("mesa2") :
                        slider9 == 6 ? ("marshall 4x12") :
                        slider9 == 7 ? ("metal 4x12")
                       );
                // increment, maximum 10
                next_value = min(7, slider9 + 1);
                // decrement, minimum 0
                prev_value = max(0, slider9 - 1);

                ui_automate(slider9, control_selector2(slider9, #selector_text,
                        next_value, prev_value));
            ui_split_next();
                ui_automate(slider13, labelled_switch_mid(slider13, "mono", "stereo"));
            ui_pop();
        ui_pop();
            
        slider9 == 0 ? (
            ui_split_topratio(1/2);
                ui_split_leftratio(1/5);
                    ui_automate(slider12, labelled_dial(slider12, 0.5, 0, 1, 0, "gain", slider12*40-20, "%.1f dB", 50,50,12));
                    
                ui_split_next();
                    ui_automate(slider10, labelled_dial(slider10, 0.5, 0, 1, 0, "drive", slider10*200-100, "%.1f %%", 50,50,12));
                    
                ui_split_next();
                    ui_automate(slider11, labelled_dial(slider11, 0.5, 0, 1, 0, "bias", slider11*200-100, "%.1f", 50,50,12));
                    
                ui_split_next();
                    ui_automate(slider14, labelled_dial(slider14, 0.4, 0, 1, 0, "hp freq", slider14*100*20, "%.i Hz", 50,50,12));
                    
                ui_split_next();
                    ui_automate(slider15, labelled_dial(slider15, 0.5, 0, 1, 0, "hp res", slider15*100, "%.1f", 50,50,12));
                ui_pop();
                
                ui_split_next();
                
                ui_split_leftratio(1/7);
                    ui_automate(slider16, labelled_dial(slider16, 0.5, 0, 1, 0, "trim", slider16*40-20, "%.1f dB", 40,40,10));
                    
                ui_split_next();
                    ui_automate(slider18, labelled_dial(slider18, 0, -2, 2, 0, "mix1", slider18/2*100, "%.i %%", 40,40,10));
                    
                ui_split_next();
                    ui_automate(slider19, labelled_dial(slider19, 0, -2, 2, 0, "mix2", slider19/2*100, "%.i %%", 40,40,10));
                    
                ui_split_next();
                    ui_automate(slider20, labelled_dial(slider20, 0, 0, 250, 0, "del1", slider20, "%.i", 40,40,10));
                    
                ui_split_next();
                    ui_automate(slider21, labelled_dial(slider21, 0, 0, 250, 0, "del2", slider21, "%.i", 40,40,10));
                    
                ui_split_next();
                    ui_automate(slider22, labelled_dial(slider22, 25, 0, 1000, 0, "hp", slider22, "%.i Hz", 40,40,10));
                    
                ui_split_next();
                    ui_automate(slider17, labelled_dial(slider17, 15000, 1000, 15000, 0, "lp", slider17, "%.i Hz", 40,40,10));
                ui_pop();
            ui_pop();
        ui_pop();
        ) : (
                
        ui_split_leftratio(1/5);
            ui_automate(slider12, labelled_dial(slider12, 0.5, 0, 1, 0, "gain", slider12*40-20, "%.1f dB", 50,50,12));
            
        ui_split_next();
            ui_automate(slider10, labelled_dial(slider10, 0.5, 0, 1, 0, "drive", slider10*200-100, "%.1f %%", 50,50,12));
            
        ui_split_next();
            ui_automate(slider11, labelled_dial(slider11, 0.5, 0, 1, 0, "bias", slider11*200-100, "%.1f", 50,50,12));
            
        ui_split_next();
            ui_automate(slider14, labelled_dial(slider14, 0.4, 0, 1, 0, "hp freq", slider14*100*20, "%.i Hz", 50,50,12));
            
        ui_split_next();
            ui_automate(slider15, labelled_dial(slider15, 0.5, 0, 1, 0, "hp res", slider15*100, "%.1f", 50,50,12));
        ui_pop();
    ui_pop(););
);

// @gfx 0 120
// gfx_r=0; gfx_g=0.9; gfx_b=0; gfx_a=1;
// gfx_setfont(1,"Arial", 16);
// 
// gfx_x =20; gfx_y =10;  gfx_printf("%.0f",(200 * fParam2 - 100) );
// gfx_x =60; gfx_y =10;  gfx_drawchar($'%');
// gfx_x =90; gfx_y =10;  (fParam2>0.7) ? ( gfx_printf("Drive    Soft <> Hard ***"); ):( gfx_printf("Drive    Soft <> Hard"); );
// 
// gfx_x =20; gfx_y =30;  gfx_printf("%.0f",(200 * fParam3 - 100) );
// gfx_x =60; gfx_y =30;  gfx_drawchar($'%');
// gfx_x =90; gfx_y =30;  gfx_printf("Bias");
// 
// gfx_x =20; gfx_y =50;  gfx_printf("%.1f",(40 * fParam4 - 20) );
// gfx_x =60; gfx_y =50;  gfx_printf("dB");
// gfx_x =90; gfx_y =50;  gfx_printf("Output");
// 
// gfx_x =20; gfx_y =70;  gfx_printf("%.0f",(100 * fParam6 * 20) );
// gfx_x =60; gfx_y =70;  gfx_drawchar($'%');
// gfx_x =90; gfx_y =70;  (fParam6>0.025) ? ( gfx_printf("HP Filter ~ Drive ***"); ):( gfx_printf("HP Filter"); );
// 
// gfx_x =20; gfx_y =90;  gfx_printf("%.0f",(100 * fParam7) );
// gfx_x =60; gfx_y =90;  gfx_drawchar($'%');
// gfx_x =90; gfx_y =90;  gfx_printf("HP Res");
