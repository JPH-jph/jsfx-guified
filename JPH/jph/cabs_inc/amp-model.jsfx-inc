// This effect Copyright (C) 2004 and later Cockos Incorporated
// License: LGPL - http://www.gnu.org/licenses/lgpl.html
// desc: Convolution Amp/Cab Modeler [COCKOS]
//tags: guitar amplifier convolution FFT

@init 

function uniinit() (
fftsize=-1;
need_refft=1;
convsrc=128*1024;
lslider1=-1;
impbuf=256*1024;
);

function unislider() (
  tmp=slider1|0;
  tmp != lslider1 ?
  (
    lslider1=tmp;
    
    slider1 == 1 ? (
    filehandle=file_open(6);
    ) : slider1 == 2 ? (
    filehandle=file_open(7);
    ) : slider1 == 3 ? (
    filehandle=file_open(8);
    ) : slider1 == 4 ? (
    filehandle=file_open(9);
    ) : slider1 == 5 ? (
    filehandle=file_open(10);
    ) : slider1 == 6 ? (
    filehandle=file_open(11);
    ) : slider1 == 7 ? (
    filehandle=file_open(12);
    ) : slider1 == 8 ? (
    filehandle=file_open(13);
    ) : slider1 == 9 ? (
    filehandle=file_open(14);
    ) : slider1 == 10 ? (
    filehandle=file_open(15);
    ) : slider1 == 11 ? (
    filehandle=file_open(16);
    ) : slider1 == 12 ? (
    filehandle=file_open(17);
    ) : slider1 == 13 ? (
    filehandle=file_open(18);
    ) : slider1 == 14 ? (
    filehandle=file_open(19);
    ) : slider1 == 15 ? (
    filehandle=file_open(20);
    ) : slider1 == 16 ? (
    filehandle=file_open(21);
    ) : slider1 == 17 ? (
    filehandle=file_open(22);
    ) : slider1 == 18 ? (
    filehandle=file_open(23);
    ) : slider1 == 19 ? (
    filehandle=file_open(24);
    ) : slider1 == 20 ? (
    filehandle=file_open(25);
    ) : slider1 == 21 ? (
    filehandle=file_open(26);
    ) : slider1 == 22 ? (
    filehandle=file_open(27);
    ) : slider1 == 23 ? (
    filehandle=file_open(28);
    ) : slider1 == 24 ? (
    filehandle=file_open(29);
    );

    impbuf_l=impbuf_nch=impbuf_srate=0;
    filehandle > 0 ? 
    (
      file_riff(filehandle,impbuf_nch,impbuf_srate);
      impbuf_nch ?
      (
        impbuf_l=(file_avail(filehandle)/impbuf_nch)|0; 
        need_refft=1; 
        file_mem(filehandle,impbuf,impbuf_l*impbuf_nch);
      );
      file_close(filehandle);
    );
  );
  !stereo_mode != !slider4 ? ( need_refft=1; stereo_mode=slider4; );



  useresample != slider3 ? (useresample=slider3; need_refft=1; );
  preamp=2^(slider2/6);
);

function uniblock() (
need_refft ? (  // prepare convolution source, here...
  useresample && srate > impbuf_srate && impbuf_srate > 1 ? 
  (
    filtersize = ((srate*impbuf_l)/impbuf_srate)|0;
    isc=impbuf_srate/srate;
  )
  : 
  (
    filtersize=impbuf_l;
    isc=1.0;
  );

  fftsize=32;

  while(
    filtersize > fftsize*0.5 ? 
    (
      fftsize += fftsize;
    ) : 0;
  );
  sliderchange(slider5);
  sliderchange(slider6); 
  chunksize=fftsize-filtersize-1; // size of chunk size of audio to use
  chunksize2=chunksize*2;
  bpos=0; 
  curblock=0;
  lastblock=64*1024;
  invfsize=1/fftsize;
  i=0;
  i2=0;
  loop(min(fftsize,filtersize),
     ipos=i|0;
     ipart=(i-ipos);
     convsrc[i2]=impbuf[ipos*impbuf_nch]*(1-ipart) + impbuf[(ipos+1)*impbuf_nch]*ipart;
     convsrc[i2+1]=stereo_mode ? 0.0 : (impbuf[(ipos+1)*impbuf_nch-1]*(1-ipart) +
                   impbuf[(ipos+1)*impbuf_nch-1]*(ipart));
     i += isc;
     i2+=2;
  );
  loop(fftsize-filtersize,
     convsrc[i2]=convsrc[i2+1]=0;
     i2+=2;
  );
  fft(convsrc,fftsize);
  i=0;
  loop(fftsize*2, convsrc[i] *= invfsize; i+=1; );
  need_refft=0;
);
);

function unisample() (
filtersize > 0 ?
(

bpos >= chunksize ? 
(
  t=lastblock;
  lastblock=curblock;
  curblock=t;

  memset(curblock+chunksize*2,0,(fftsize-chunksize)*2);

  fft(curblock,fftsize);
  convolve_c(curblock,convsrc,fftsize);


/*
  i=0;
  loop(fftsize,
    r=curblock[i]; im=curblock[i+1];   
    cr=convsrc[i]; ci=convsrc[i+1];
    curblock[i]=r*cr-im*ci;
    curblock[i+1]=r*ci+im*cr;
    i+=2;
  );
*/

  ifft(curblock,fftsize);

  bpos=0;
);

// save sample
bp2=bpos*2;
lastblock[bp2]=spl0*preamp;
lastblock[bp2+1]=stereo_mode ? (spl1*preamp) : 0;

spl0=curblock[bp2];
spl1=curblock[bp2+2]; //curblock[bp2+1]

bpos < fftsize-chunksize ? 
(
  spl0+=lastblock[chunksize2+bp2];
  spl1+=lastblock[chunksize2+bp2+2]; //lastblock[chunksize2+bp2+1]
);


bpos += 1;

);
);

function unigfx() (
        ui_split_leftratio(1/3);
                sprintf(#selector_text, "%s", 
                        slider1 == 1 ? ("dumble") : 
                        slider1 == 2 ? ("fend bassman") :
                        slider1 == 3 ? ("fend tweed") :
                        slider1 == 4 ? ("fend del") :
                        slider1 == 5 ? ("fend del 70") :
                        slider1 == 6 ? ("marsh jcm800") :
                        slider1 == 7 ? ("marsh jcm800S") :
                        slider1 == 8 ? ("marsh jtm") :
                        slider1 == 9 ? ("marsh jtmS") :
                        slider1 == 10 ? ("mesa") :
                        slider1 == 11 ? ("mesaS") :
                        slider1 == 12 ? ("vox") :
                        slider1 == 13 ? ("tweed 1x12") : 
                        slider1 == 14 ? ("dark 1x15") :
                        slider1 == 15 ? ("1936 2x12") :
                        slider1 == 16 ? ("ac 2x12") :
                        slider1 == 17 ? ("boutique 2x12") :
                        slider1 == 18 ? ("black 4x10") :
                        slider1 == 19 ? ("1960 4x12") :
                        slider1 == 20 ? ("boxy 4x12") :
                        slider1 == 21 ? ("classic 4x12") :
                        slider1 == 22 ? ("green 4x12") :
                        slider1 == 23 ? ("metal 4x12") :
                        slider1 == 24 ? ("modern 4x12")
                       );
                // increment, maximum 10
                next_value = min(24, slider1 + 1);
                // decrement, minimum 0
                prev_value = max(1, slider1 - 1);

                ui_automate(slider1, control_selector2(slider1, #selector_text,
                        next_value, prev_value));
                
        ui_split_next();         
            ui_automate(slider2, labelled_dial(slider2, 0, -120, 30, 0, "gain", slider2, "%.1f dB", 50,50,12));
              
        ui_split_next();
            ui_split_topratio(1/4);
                ui_split_next();
                        ui_automate(slider3, labelled_switch_mid(slider3, "", "upsample"));
                    ui_split_next();
                        ui_automate(slider4, labelled_switch_mid(slider4, "L", "S"));
                ui_split_next();
            ui_pop();
    ui_pop();
);
