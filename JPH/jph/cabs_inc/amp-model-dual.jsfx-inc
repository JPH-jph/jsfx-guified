// This effect Copyright (C) 2004 and later Cockos Incorporated
// License: LGPL - http://www.gnu.org/licenses/lgpl.html
// desc: Convolution Dual Amp Modeler (mono->stereo)
//tags: guitar amplifier convolution FFT

@init 

function dualinit() (
fftsize=-1;
need_refft=1;
convsrc=128*1024;
lslider1=lslider2=-1;
impbuf=256*1024;
rimpbuf=512*1024;
);

function dualslider() (
  tmp=slider5|0;
  tmp != lslider1 ? 
  (
    lslider1=tmp;
    
    slider5 == 1 ? (
    filehandle=file_open(6);
    ) : slider5 == 2 ? (
    filehandle=file_open(7);
    ) : slider5 == 3 ? (
    filehandle=file_open(8);
    ) : slider5 == 4 ? (
    filehandle=file_open(9);
    ) : slider5 == 5 ? (
    filehandle=file_open(10);
    ) : slider5 == 6 ? (
    filehandle=file_open(11);
    ) : slider5 == 7 ? (
    filehandle=file_open(12);
    ) : slider5 == 8 ? (
    filehandle=file_open(13);
    ) : slider5 == 9 ? (
    filehandle=file_open(14);
    ) : slider5 == 10 ? (
    filehandle=file_open(15);
    ) : slider5 == 11 ? (
    filehandle=file_open(16);
    ) : slider5 == 12 ? (
    filehandle=file_open(17);
    );
    
    impbuf_nch=impbuf_srate=impbuf_l=0;

    filehandle > 0 ?
    (
      file_riff(filehandle,impbuf_nch,impbuf_srate);
      impbuf_nch?
      (
        impbuf_l=file_avail(filehandle)/impbuf_nch; 
        need_refft=1; 
        file_mem(filehandle,impbuf,impbuf_l*impbuf_nch);
      );
      file_close(filehandle);
    );
  );
  tmp=slider6|0;
  tmp != lslider2 ? 
  (
    lslider2=tmp;
    
    slider6 == 1 ? (
    filehandle=file_open(6);
    ) : slider6 == 2 ? (
    filehandle=file_open(7);
    ) : slider6 == 3 ? (
    filehandle=file_open(8);
    ) : slider6 == 4 ? (
    filehandle=file_open(9);
    ) : slider6 == 5 ? (
    filehandle=file_open(10);
    ) : slider6 == 6 ? (
    filehandle=file_open(11);
    ) : slider6 == 7 ? (
    filehandle=file_open(12);
    ) : slider6 == 8 ? (
    filehandle=file_open(13);
    ) : slider6 == 9 ? (
    filehandle=file_open(14);
    ) : slider6 == 10 ? (
    filehandle=file_open(15);
    ) : slider6 == 11 ? (
    filehandle=file_open(16);
    ) : slider6 == 12 ? (
    filehandle=file_open(17);
    );
    
    rimpbuf_nch=rimpbuf_srate=rimpbuf_l=0;

    filehandle > 0 ? 
    (
      file_riff(filehandle,rimpbuf_nch,rimpbuf_srate);
      rimpbuf_nch?
      (
        rimpbuf_l=file_avail(filehandle)/rimpbuf_nch; 
        need_refft=1; 
        file_mem(filehandle,rimpbuf,rimpbuf_l*rimpbuf_nch);
      );
      file_close(filehandle);
    );
  );

  useresample != slider4 ? (useresample=slider4; need_refft=1; );
  preamp=2^(slider7/6);
);

function dualblock() (
need_refft ? ( // prepare convolution source, here...
  fs_l=impbuf_l;
  fs_r=rimpbuf_l;
  isc=1.0;
  risc=1.0;

  useresample ? (
    srate > impbuf_srate && impbuf_srate > 1 ? (
      fs_l=((srate*impbuf_l)/impbuf_srate)|0;
      isc=impbuf_srate/srate;
    );
    srate > rimpbuf_srate && rimpbuf_srate > 1 ? (
      fs_r=((srate*rimpbuf_l)/rimpbuf_srate)|0;
      risc=rimpbuf_srate/srate;
    );
  );

  filtersize = max(fs_l,fs_r);
  fftsize=32;
  while(
    filtersize > fftsize*0.5 ? 
    (
      fftsize += fftsize;
    ) : 0;
  );
  sliderchange(16+32);
  chunksize=fftsize-filtersize-1; // size of chunk size of audio to use
  chunksize2=chunksize*2;
  bpos=0; 
  curblock=0;
  lastblock=64*1024;
  invfsize=1/fftsize;

  i=0;
  i2=0;
  loop(min(fftsize,fs_l),
     ipos=i|0;
     ipart=(i-ipos);
     convsrc[i2]=impbuf[ipos*impbuf_nch]*(1-ipart) + 
                 impbuf[(ipos+1)*impbuf_nch]*ipart;
     i += isc;
     i2+=2;
  );
  loop(fftsize-fs_l,
     convsrc[i2]=i2==0?1:0;
     i2+=2;
  );

  i=0;
  i2=1;
  loop(min(fftsize,fs_r),
     ipos=i|0;
     ipart=(i-ipos);
     convsrc[i2]=rimpbuf[(ipos+1)*rimpbuf_nch-1]*(1-ipart) +
                   rimpbuf[(ipos+2)*rimpbuf_nch-1]*(ipart);
     i += risc;
     i2+=2;
  );
  loop(fftsize-fs_r,
     convsrc[i2]=i2==1?1:0;
     i2+=2;
  );

  fft(convsrc,fftsize);

  i=0;
  loop(fftsize*2, convsrc[i] *= invfsize; i+=1; );
  need_refft=0;
);
);

function dualsample() (
bpos >= chunksize ? 
(
  t=lastblock;
  lastblock=curblock;
  curblock=t;

  memset(curblock+chunksize*2,0,(fftsize-chunksize)*2);

  fft(curblock,fftsize);
  convolve_c(curblock,convsrc,fftsize);
  ifft(curblock,fftsize);

  bpos=0;
);

bp2=bpos*2;

// save sample
lastblock[bp2]=spl0*preamp;
lastblock[bp2+1]=0;

spl0=curblock[bp2];
spl1=curblock[bp2+1];

bpos < fftsize-chunksize ? 
(
  spl0+=lastblock[chunksize2+bp2];
  spl1+=lastblock[chunksize2+bp2+1];
);


bpos += 1;
);

function dualgfx() (
        ui_split_leftratio(1/3);
            ui_split_topratio(1/2);
                sprintf(#selector_text, "%s", 
                        slider5 == 1 ? ("dumble") : 
                        slider5 == 2 ? ("fender b") :
                        slider5 == 3 ? ("fender b2") :
                        slider5 == 4 ? ("fender d") :
                        slider5 == 5 ? ("fender d2") :
                        slider5 == 6 ? ("marshall jcm") :
                        slider5 == 7 ? ("marshall jcm") :
                        slider5 == 8 ? ("marshall jtm") :
                        slider5 == 9 ? ("marshall jtm2") :
                        slider5 == 10 ? ("mesa") :
                        slider5 == 11 ? ("mesa2") :
                        slider5 == 12 ? ("vox")
                       );
                // increment, maximum 10
                next_value = min(12, slider5 + 1);
                // decrement, minimum 0
                prev_value = max(1, slider5 - 1);

                ui_automate(slider5, control_selector2(slider5, #selector_text,
                        next_value, prev_value));

            ui_split_next();
            
                sprintf(#selector_text2, "%s", 
                        slider6 == 1 ? ("dumble") : 
                        slider6 == 2 ? ("fender b") :
                        slider6 == 3 ? ("fender b2") :
                        slider6 == 4 ? ("fender d") :
                        slider6 == 5 ? ("fender d2") :
                        slider6 == 6 ? ("marshall jcm") :
                        slider6 == 7 ? ("marshall jcm") :
                        slider6 == 8 ? ("marshall jtm") :
                        slider6 == 9 ? ("marshall jtm2") :
                        slider6 == 10 ? ("mesa") :
                        slider6 == 11 ? ("mesa2") :
                        slider6 == 12 ? ("vox")
                       );
                // increment, maximum 10
                next_value2 = min(12, slider6 + 1);
                // decrement, minimum 0
                prev_value2 = max(1, slider6 - 1);

                ui_automate(slider6, control_selector2(slider6, #selector_text2,
                        next_value2, prev_value2));
            
                ui_pop();
                
        ui_split_next();         
            ui_automate(slider7, labelled_dial(slider7, 0, -120, 30, 0, "gain", slider7, "%.1f dB", 50,50,12));
              
        ui_split_next();
            ui_automate(slider8, labelled_switch_mid(slider8, "", "upsample"));
    ui_pop();
);
