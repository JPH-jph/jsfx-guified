// Copyright 2006, Thomas Scott Stillwell
// All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted 
//provided that the following conditions are met:
//
//Redistributions of source code must retain the above copyright notice, this list of conditions 
//and the following disclaimer. 
//
//Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//and the following disclaimer in the documentation and/or other materials provided with the distribution. 
//
//The name of Thomas Scott Stillwell may not be used to endorse or 
//promote products derived from this software without specific prior written permission. 
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
//IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
//FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
//BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
//STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//tags: dynamics compressor
//author: Stillwell

@init

function elevenslider() (
  thresh = slider1;
  threshv = exp(thresh * db2log);
  ratio = (slider2==0 ? 4 : (slider2==1 ? 8 : (slider2 == 2 ? 12 : (slider2 == 3 ? 20 : 20 ))));
  slider2 == 4 ? (allin=1; cratio=20;) : (allin=0; cratio = ratio;);
  cthresh = (softknee ? (thresh -3) : thresh);
  cthreshv = exp(cthresh * db2log);
  makeup = slider3;
  makeupv = exp((makeup+autogain) * db2log);
  attime = slider4 / 1000000;
  reltime = slider5 / 1000;
  atcoef=exp(-1/(attime * srate));
  relcoef=exp(-1/(reltime * srate));
);

function elevensample() (
  ospl0 = spl0;
  ospl1 = spl1;
  aspl0 = abs(spl0);
  aspl1 = abs(spl1);
  maxspl = max(aspl0, aspl1);
  maxspl = maxspl * maxspl;
  runave = maxspl + rmscoef * (runave - maxspl);
  det = sqrt(max(0,runave));

  overdb = 2.08136898 * log(det/cthreshv) * log2db;
  overdb = max(0,overdb);

  overdb - rundb > 5 ? (averatio = 4;);

  overdb > rundb ? (
    rundb = overdb + atcoef * (rundb - overdb);
    runratio = averatio + ratatcoef * (runratio - averatio);
  ) : (
    rundb = overdb + relcoef * (rundb - overdb);
    runratio = averatio + ratrelcoef * (runratio - averatio);
  );
  overdb = rundb;
  averatio = runratio;

  allin ? (
    cratio = 12 + averatio;
  ) : (
    cratio = ratio;
  );
  
  gr = -overdb * (cratio-1)/cratio;
  grv = exp(gr * db2log);
  
  slider60 = gr;
  
  runmax = maxover + relcoef * (runmax - maxover);  // highest peak for setting att/rel decays in reltime
  maxover = runmax;

  grv < gr_meter ? gr_meter=grv : ( gr_meter*=gr_meter_decay; gr_meter>1?gr_meter=1; );

  spl0 *= grv * makeupv * mix;
  spl1 *= grv * makeupv * mix;  
  
  spl0 += ospl0 * (1-mix);
  spl1 += ospl1 * (1-mix);
);

function elevengfx() (
ui_split_topratio(2/3);
    ui_split_leftratio(4/5);
    control_group("");
        ui_split_leftratio(1/4);
            ui_automate(slider1, labelled_dial(slider1, 0, -60, 0, 0, "threshold", slider1, "%.1f dB", 50, 50, 12));
        ui_split_next();
            ui_automate(slider2, labelled_dial(slider2, 1, 0, 4, 0, "ratio", slider2, slider2 < 1 ? ("4") : slider2 < 2 ? ("8") : slider2 < 3 ? ("12") : slider2 < 4 ? ("20") : slider2 < 5 ? ("All"), 50, 50, 12));
        ui_split_next();
            ui_automate(slider4, labelled_dial(slider4, 20, 20, 2000, 0, "attack", slider4, "%.i ms", 50, 50, 12));
        ui_split_next();
            ui_automate(slider5, labelled_dial(slider5, 250, 20, 1000, 0, "release", slider5, "%.i ms", 50, 50, 12));
        ui_pop();
        ui_split_next();
        control_group("");
        ui_automate(slider3, labelled_dial(slider3, 0, -20, 20, 0, "gain", slider3, "%.1f dB", 50, 50, 12));
ui_pop();    

ui_split_next();
control_group("");
        ui_automate(slider60, labelled_meter2(slider60, 0, -50, 0, "output", slider60, "%.1f dB", 0));
ui_pop();
);
