// Foldback Distortion
//
// When the signal reaches the set ceiling or 0, it will be
// "folded" into the opposite direction. Which means values
// (ceiling + overshoot) will become (ceiling - overshoot).
//
// This will continue folding between ceiling and 0 until
// no more overshoot is found, so it will grow rather CPU
// demanding with increasing amounts of folds/distortion.
//
// This is not oversampled, i.e. it will create aliasing. I
// tried adding oversampling to this, and all that happened
// was that the distorted waveforms lost the new harmonics
// and with every additional oversampling step, the output
// gradually went back to its original form. So, kinda meh.
//
// But I added a DC blocker in, with all the aliasing can't
// really hurt to have that around.
//
// author: chokehold
// url:    https://github.com/chkhld/jsfx/
// tags:   processing distortion foldback


@init
  
  // Decibel to gain factor conversion
  function dBToGain (decibels) (10.0 ^ (decibels / 20.0));
  
  function foldback () instance (signum)
  (
    signum = sign(this);
    
    while ((this > ceiling) || (this < 0))
    (
      this < 0 ? this = abs(this);
      
      (this > ceiling) ? this = ceiling - (this - ceiling);
    );
	
    this *= signum;
  );
  
  // DC Blocker to remove near-static frequency content
  // that would otherwise "offset" the waveform.
  function dcBlocker () instance (stateIn, stateOut)
  (
    stateOut *= 0.99988487;
    stateOut += this - stateIn;
    stateIn = this;
    this = stateOut;
  );

function foldbackslider() (

  ceiling = dBToGain(dBCeiling);
  gain    = dBToGain(dBBoost);
);

function foldbacksample() (  
  // Input boost
  spl0 *= gain;
  spl1 *= gain;
  
  // Finally, the actual processing
  spl0.foldback();
  spl1.foldback();
  
  // If DC blocking enabled
  blocker == 0 ?
  (
    // Run the DC blocker on each sample
    spl0.dcBlocker();
    spl1.dcBlocker();
  );
);

function foldbackgfx() (
    ui_split_leftratio(0.6);
        ui_split_leftratio(1/3);
            ui_automate(dbBoost, labelled_dial(dbBoost, 0, 0, 48, 0, "boost", dbBoost, "%.1f dB", 50,50,12));
        ui_split_next();
            ui_automate(dbCeiling, labelled_dial(dbCeiling, 0, -48, 0, 0, "ceiling", dbCeiling, "%.1f", 50,50,12));
        ui_split_next();
            ui_automate(blocker, oneway_switch(blocker, "DC block", 20, 12));
        ui_pop();
    ui_pop();
    
        draw_wavescope();  
);
