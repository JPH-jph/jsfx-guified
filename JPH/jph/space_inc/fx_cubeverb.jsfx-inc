desc:fx_cubeverb :: ccernn.2009 :: v0.0.1
// This effect Copyright (C) 2004 and later Zeven Sound Technology
// 23/01/2005 - Added multichannel support
// ccernn : adapted to reaper
// desc: ZST 1-Channel Cube-type reverb #2

@init

function cubeinit() (
  c_rp0p = 0;
  c_rp1p = 0;
  c_rp2p = 0;
  c_splbuf_L = 500000;
  c_splbuf_R = 1000000;
);

function cubeslider() (
  c_notch1 = slider36;
  c_wet    = 2^(0/6);
  c_dry    = 2^(-99/6)-1;
  c_phase  = cos((slider40/180)*$pi);
  c_decay  = (2^(slider39/6))/3;
  c_mat1   = slider37;
  c_mat2   =  c_mat1^2;
  c_mat3   = c_mat1^3;
  c_cube_size1  = slider38*.001;
  c_cube_size2  = (c_cube_size1^2 * 2) ^ .5;
  c_cube_size3  = (c_cube_size1^2 * 3) ^ .5;
  cube_sh0    = c_cube_size1 * srate;
  cube_sh0h   = floor(cube_sh0*.5);
  cube_sh1    = c_cube_size2 * srate;
  cube_sh1h   = floor(cube_sh1*.5);
  cube_sh2    = c_cube_size3 * srate;
  cube_sh2h   = floor(cube_sh2*.5);
  c_rev0_L = 0;
  c_rev1_L = 0;
  c_rev2_L = 0;
  c_rev0_R = 0;
  c_rev1_R = 0;
  c_rev2_R = 0;
);

function cubesample() (
  c_revin_L = spl0;
  c_d_L     = c_d_L + (c_revin_L-c_d_L) * c_notch1;
  c_s_L     = c_revin_L - c_d_L;
  c_out_L   = c_splbuf_L[c_rp0*3] + c_splbuf_L[c_rp1*3+1] + c_splbuf_L[c_rp2*3+2];
  c_out2_L  = c_splbuf_L[(c_rp0+cube_sh0h)%cube_sh0*3] + c_splbuf_L[(c_rp1+cube_sh1h)%cube_sh1*3+1] + c_splbuf_L[(c_rp2+cube_sh2h)%cube_sh2*3+2];
  feec_d_L  = c_out_L * c_decay + c_s_L;
  c_rev0_L  += (feec_d_L - c_rev0_L) * c_mat1;
  c_rev1_L  += (feec_d_L - c_rev1_L) * c_mat2;
  c_rev2_L  += (feec_d_L - c_rev2_L) * c_mat3;
  c_splbuf_L[c_rp0*3  ] = c_rev0_L;
  c_splbuf_L[c_rp1*3+1] = c_rev1_L;
  c_splbuf_L[c_rp2*3+2] = c_rev2_L;
  c_finalmix_L = (c_revin_L + c_out2_L * c_phase) * c_wet + c_revin_L * c_dry;
  spl0 = c_finalmix_L;
  c_revin_revin_R = spl1;
  c_d_R     = c_d_R + (c_revin_revin_R-c_d_R) * c_notch1;
  c_s_R     = c_revin_revin_R - c_d_R;
  c_out_R   = c_splbuf_R[c_rp0*3] + c_splbuf_R[c_rp1*3+1] + c_splbuf_R[c_rp2*3+2];
  c_out2_R  = c_splbuf_R[(c_rp0+cube_sh0h)%cube_sh0*3] + c_splbuf_R[(c_rp1+cube_sh1h)%cube_sh1*3+1] + c_splbuf_R[(c_rp2+cube_sh2h)%cube_sh2*3+2];
  feec_d_R  = c_out_R * c_decay + c_s_R;
  c_rev0_R  += (feec_d_R - c_rev0_R) * c_mat1;
  c_rev1_R  += (feec_d_R - c_rev1_R) * c_mat2;
  c_rev2_R  += (feec_d_R - c_rev2_R) * c_mat3;
  c_splbuf_R[c_rp0*3  ] = c_rev0_R;
  c_splbuf_R[c_rp1*3+1] = c_rev1_R;
  c_splbuf_R[c_rp2*3+2] = c_rev2_R;
  c_finalmix_R = (c_revin_revin_R + c_out2_R * c_phase) * c_wet + c_revin_revin_R * c_dry;
  spl1 = c_finalmix_R;
  (c_rp0 += 1) >= cube_sh0 ? c_rp0 = 0;
  (c_rp1 += 1) >= cube_sh1 ? c_rp1 = 0;
  (c_rp2 += 1) >= cube_sh2 ? c_rp2 = 0;
);

function cubegfx() (
    ui_split_leftratio(0.6);
        ui_split_leftratio(1/5);
            ui_automate(slider36, labelled_dial(slider36, 0.05, 0, 1, 0, "low cut", slider36, "%.2f", 50,50,12));
        ui_split_next();
            ui_automate(slider37, labelled_dial(slider37, .25, 0, 1, 0, "material", slider37, "%.2f", 50,50,12));
        ui_split_next();
            ui_automate(slider38, labelled_dial(slider38, 50, 0, 1000, 0, "size", slider38, "%.i ms", 50,50,12));
        ui_split_next();
            ui_automate(slider39, labelled_dial(slider39, 0, -99, 0, 0, "decay", slider39, "%.1f dB", 50,50,12));
        ui_split_next();
            ui_automate(slider40, labelled_dial(slider40, 0, 0, 180, 0, "phase", slider40, "%.i Â°", 50,50,12));
        ui_pop();
    ui_pop();
    
        draw_verbs(0,0,0.45,slider38*0.00045);
);
