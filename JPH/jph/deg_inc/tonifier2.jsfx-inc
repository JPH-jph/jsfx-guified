// This effect Copyright (C) 2004 and later Cockos Incorporated
// License: LGPL - http://www.gnu.org/licenses/lgpl.html
// this algorithm is based on the one used by gtkguituner, the schmitt-triggering.
//tags: processing generator mangler
//author: Cockos

@init

function tonislider() (
  sscal=2 ^ (slider35/12) / srate;
  wet=2 ^ (0/6);
  dry=2 ^ (-100/6);

  maxf=slider38/srate*2; minf=slider37/srate*2;

  state=0;
  splpos=0;
  trigfact=0.5;
  numsamples=1024;
  lastrate=0;
);

function toniblock() (
  updcnt=updcnt+samplesblock; 
  updcnt > srate*0.5 ? ( updcnt=0; slider39=(freq0+freq1)*0.25*srate; sliderchange(128); );
);

function tonisample() (
state ? 
(
  // track minimum and maximum values for sample
  a1=max(a1,spl0);
  a2=min(a2,spl0);

  splpos[0]=spl0;
  splpos += 1;
  splpos >= 1024 ? 
  (
    splpos=0;
    state=0;
    a2 *= trigfact;
    a1 *= trigfact;

    lst=0;
    startpoint=1;
    loop(numsamples-1, 
        lst == 0 && startpoint[0] > a1 ? lst=1;
        lst == 1 && startpoint[0] >= a2 && startpoint[1] < a2 ? lst=2;
        lst != 2 ? startpoint+=1;       
    );
    smtrig=0;
    endpoint=startpoint+1;
    tc=0;
    i=startpoint;
    loop(numsamples-startpoint,
       smtrig ? 
       ( 
          i[0] >= a2 && i[1] < a2 ? (
            endpoint=i;
            tc+=1;
            smtrig=0;
          )
       )
       :
       (
          smtrig = i[0] >= a1;
       );
       i+=1;

    );
    endpoint == startpoint ? endpoint += 1;

    lastrate = tc / (endpoint-startpoint);

  );
)
:
(
  0[0] <= 0 && spl0 > 0 ?
  (
    state=1;
    1[0]=spl0;
    splpos=2;
    a1=spl0;
    a2=0[0];
  );
);


// count amplitude (square maybe?)
ampcnt0=max(ampcnt0,abs(spl0));
ampcnt1=max(ampcnt1,abs(spl1));

acnt0=ampcnt0 * (1-slider34) + acnt0*slider34;
acnt1=ampcnt1 * (1-slider34) + acnt0*slider34;
ampcnt0 *= slider34;
ampcnt1 *= slider34;

freq0=lastrate*2;
freq1=lastrate*2;

loop(slider36,
  freq0 > maxf ? freq0*=0.5 : (freq0 < minf ? freq0 *= 2);
  freq1 > maxf ? freq1*=0.5 : (freq1 < minf ? freq1 *= 2);
);

tpos0=tpos0+$pi*freq0;
tpos1=tpos1+$pi*freq1;

spl0=sin(tpos0)*acnt0*wet + spl0*dry;
spl1=sin(tpos1)*acnt1*wet + spl1*dry;
);

function tonigfx() (

        ui_split_leftratio(1/4);
            gfx_line(ui_right(),ui_bottom(),ui_right(),ui_top());
            ui_automate(slider34, labelled_dial(slider34, 0.995, 0.96, 1, 0, "ampl falloff", slider34, "%.3f", 50,50,12));
            
        ui_split_next();
        gfx_line(ui_right(),ui_bottom(),ui_right(),ui_top());
            ui_automate(slider35, labelled_dial(slider35, 0, -48, 48, 0, "freq shift", slider35, "%.i semitones", 50,50,12));
        
        ui_split_next();
            ui_split_topratio(0.8);
                ui_automate(slider36, labelled_dial(slider36, 4, 0, 6, 0, "auto shift", slider36, "%.i octaves", 50,50,12));
            ui_split_next();
                ui_textnumber(slider39, "%.i Hz");
            ui_pop();

            
        ui_split_next();
            ui_split_topratio(1/2);
                ui_automate(slider37, labelled_dial(slider37, 100, 0, 20000, 0, "min freq", slider37, "%.i Hz", 50,50,12));
            ui_split_next();
            gfx_line(ui_left(),ui_top(),ui_right(),ui_top());
                ui_automate(slider38, labelled_dial(slider38, 300, 0, 20000, 0, "max freq", slider38, "%.i Hz", 50,50,12));
            ui_pop();
            
        ui_pop();
);
