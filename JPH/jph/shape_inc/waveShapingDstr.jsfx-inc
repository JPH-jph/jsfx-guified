// (C) 2007, Michael Gruhn.
// NO WARRANTY IS GRANTED. THIS PLUG-IN IS PROVIDED ON AN "AS IS" BASIS, WITHOUT
// WARRANTY OF ANY KIND. NO LIABILITY IS GRANTED, INCLUDING, BUT NOT LIMITED TO,
// ANY DIRECT OR INDIRECT,  SPECIAL,  INCIDENTAL OR CONSEQUENTIAL DAMAGE ARISING
// OUT OF  THE  USE  OR INABILITY  TO  USE  THIS PLUG-IN,  COMPUTER FAILTURE  OF
// MALFUNCTION INCLUDED.  THE USE OF THE SOURCE CODE,  EITHER  PARTIALLY  OR  IN
// TOTAL, IS ONLY GRANTED,  IF USED IN THE SENSE OF THE AUTHOR'S INTENTION,  AND
// USED WITH ACKNOWLEDGEMENT OF THE AUTHOR. FURTHERMORE IS THIS PLUG-IN A  THIRD
// PARTY CONTRIBUTION,  EVEN IF INCLUDED IN REAPER(TM),  COCKOS INCORPORATED  OR
// ITS AFFILIATES HAVE NOTHING TO DO WITH IT.  LAST BUT NOT LEAST, BY USING THIS
// PLUG-IN YOU RELINQUISH YOUR CLAIM TO SUE IT'S AUTHOR, AS WELL AS THE CLAIM TO
// ENTRUST SOMEBODY ELSE WITH DOING SO.
//tags: processing distortion waveshaper
//author: LOSER
@init

function waveshapeslider() (
//exp scale
sx = 16+slider30*1.20103;
cutoff = floor(exp(sx*log(1.059))*8.17742);

//coeff
cutoff = min(cutoff,20000);
lp_cut = 2*$pi*cutoff;
lp_n = 1/(lp_cut+ 3*srate);
lp_b1 = (3*srate - lp_cut)*lp_n;
lp_a0 = lp_cut*lp_n;

hdistr = min(slider29/100,.999);
foo = 2*hdistr/(1-hdistr);
);

function waveshapesample() (
//simplelp6dbfilter
inl = spl0;
inr = spl1;
lp_outl = 2*inl*lp_a0 + lp_outl*lp_b1;
lp_outr = 2*inr*lp_a0 + lp_outr*lp_b1;

spl0 = (inl-lp_outl)*outgain;
spl1 = (inr-lp_outr)*outgain;

//waveshaper
spl0 = min(max(spl0,-1),1);
spl1 = min(max(spl1,-1),1);

spl0 = (1+foo)*spl0/(1+foo*abs(spl0));
spl1 = (1+foo)*spl1/(1+foo*abs(spl1));
);

function waveshapegfx() (
    ui_split_leftratio(0.6);
        ui_split_leftratio(1/2);
            ui_automate(slider29, labelled_dial(slider29, 0, 0, 100, 0, "distortion", slider29, "%.1f %%", 50,50,12));
        ui_split_next();
            ui_automate(slider30, labelled_dial(slider30, 0, 0, 100, 0, "hp", slider30, "%.1f %%", 50,50,12));
        ui_pop();
    ui_pop();
    
        draw_wavescope();
);
