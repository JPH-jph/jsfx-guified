// (C) 2008-2009, Lubomir I. Ivanov
//
// NO WARRANTY IS GRANTED. THIS PLUG-IN IS PROVIDED ON AN "AS IS" BASIS, WITHOUT
// WARRANTY OF ANY KIND. NO LIABILITY IS GRANTED, INCLUDING, BUT NOT LIMITED TO,
// ANY DIRECT OR INDIRECT,  SPECIAL,  INCIDENTAL OR CONSEQUENTIAL DAMAGE ARISING
// OUT OF  THE  USE  OR INABILITY  TO  USE  THIS PLUG-IN,  COMPUTER FAILTURE  OF
// MALFUNCTION INCLUDED.  THE USE OF THE SOURCE CODE,  EITHER  PARTIALLY  OR  IN
// TOTAL, IS ONLY GRANTED,  IF USED IN THE SENSE OF THE AUTHOR'S INTENTION,  AND
// USED WITH ACKNOWLEDGEMENT OF THE AUTHOR. FURTHERMORE IS THIS PLUG-IN A  THIRD
// PARTY CONTRIBUTION,  EVEN IF INCLUDED IN REAPER(TM),  COCKOS INCORPORATED  OR
// ITS AFFILIATES HAVE NOTHING TO DO WITH IT.  LAST BUT NOT LEAST, BY USING THIS
// PLUG-IN YOU RELINQUISH YOUR CLAIM TO SUE IT'S AUTHOR, AS WELL AS THE CLAIM TO
// ENTRUST SOMEBODY ELSE WITH DOING SO.
// 
// Released under GPL:
// <http://www.gnu.org/licenses/>.
//
//******************************************************************************
// butterworth filter implementation - 
// original port from apple.com au tutorial (c+)
// added HP version
// added 12 poles cascade
// * see note below about efficiency
//******************************************************************************
//author: Liteon

@init

function apple12slider() (
mono = slider1;

//****************************
//hp

n_hp = slider2;
sx = 16+slider3*1.20103;
cx_hp = floor(exp(sx*log(1.059))*8.17742);

cutoff_hp = 2*cx_hp/srate;
res_hp = 10^(0.05*(-slider4/n_hp+1.5));

k = 0.5*res_hp*sin($pi*cutoff_hp);
c1 = 0.5*(1-k)/(1+k);
c2 = (0.5+c1)*cos($pi*cutoff_hp);
c3 = (0.5+c1+c2)*0.25;

a0_hp = 2*c3;
a1_hp = -4*c3;
a2_hp = 2*c3;
b1_hp = -2*c2;
b2_hp = 2*c1;

//****************************
//lp

n_lp = slider5;
sx = 16+slider6*1.20103;
cx_lp = floor(exp(sx*log(1.059))*8.17742);
cutoff_lp = 2*cx_lp/srate;
res_lp = 10^(0.05*(-slider7/n_lp+1.5));

k = 0.5*res_lp*sin($pi*cutoff_lp);
c1 = 0.5*(1-k)/(1+k);
c2 = (0.5+c1)*cos($pi*cutoff_lp);
c3 = (0.5+c1-c2)*0.25;

a0_lp = 2*c3;
a1_lp = 4*c3;
a2_lp = 2*c3;
b1_lp = -2*c2;
b2_lp = 2*c1;
);

function apple12sample() (
// *NOTE: You can use 'loop' for the cascade (see example below)
// however its many times less efficient !
//
// comparison for - mono, lp, 72db:
// --------------------
// using loop - 13.8% cpu 
// long version - 3.3% cpu
/*
i = 0;
inl = (spl0+spl1)/2;
loop(n_lp,
outl = a0_lp*inl+a1_lp*mem[4*i+1]+a2_lp*mem[4*i+2]-b1_lp*mem[4*i+3]-b2_lp*mem[4*i+4];
mem[4*i+2] = mem[4*i+1];
mem[4*i+1] = inl;
mem[4*i+4] = mem[4*i+3];
mem[4*i+3] = outl;
inl = outl;
i += 1;
);
spl0=spl1=outl;
*/

//***************************************************************************
//mono
mono == 1 ? (
inl = (spl0+spl1)/2;
//*********************************************
//hp
n_hp > 0 ? (
out_hp_l_1 = a0_hp*inl+a1_hp*mem_hp_l_11+a2_hp*mem_hp_l_12-b1_hp*mem_hp_l_13-b2_hp*mem_hp_l_14;
mem_hp_l_12 = mem_hp_l_11;
mem_hp_l_11 = inl;
mem_hp_l_14 = mem_hp_l_13;
mem_hp_l_13 = out_hp_l_1;
out_hp_l = out_hp_l_1;
n_hp > 1 ? (
out_hp_l_2 = a0_hp*out_hp_l_1+a1_hp*mem_hp_l_21+a2_hp*mem_hp_l_22-b1_hp*mem_hp_l_23-b2_hp*mem_hp_l_24;
mem_hp_l_22 = mem_hp_l_21;
mem_hp_l_21 = out_hp_l_1;
mem_hp_l_24 = mem_hp_l_23;
mem_hp_l_23 = out_hp_l_2;
out_hp_l = out_hp_l_2;
);
n_hp > 2 ? (
out_hp_l_3 = a0_hp*out_hp_l_2+a1_hp*mem_hp_l_31+a2_hp*mem_hp_l_32-b1_hp*mem_hp_l_33-b2_hp*mem_hp_l_34;
mem_hp_l_32 = mem_hp_l_31;
mem_hp_l_31 = out_hp_l_2;
mem_hp_l_34 = mem_hp_l_33;
mem_hp_l_33 = out_hp_l_3;
out_hp_l = out_hp_l_3;
);
n_hp > 3 ? (
out_hp_l_4 = a0_hp*out_hp_l_3+a1_hp*mem_hp_l_41+a2_hp*mem_hp_l_42-b1_hp*mem_hp_l_43-b2_hp*mem_hp_l_44;
mem_hp_l_42 = mem_hp_l_41;
mem_hp_l_41 = out_hp_l_3;
mem_hp_l_44 = mem_hp_l_43;
mem_hp_l_43 = out_hp_l_4;
out_hp_l = out_hp_l_4;
);
n_hp > 4 ? (
out_hp_l_5 = a0_hp*out_hp_l_4+a1_hp*mem_hp_l_51+a2_hp*mem_hp_l_52-b1_hp*mem_hp_l_53-b2_hp*mem_hp_l_54;
mem_hp_l_52 = mem_hp_l_51;
mem_hp_l_51 = out_hp_l_4;
mem_hp_l_54 = mem_hp_l_53;
mem_hp_l_53 = out_hp_l_5;
out_hp_l = out_hp_l_5;
);
n_hp > 5 ? (
out_hp_l_6 = a0_hp*out_hp_l_5+a1_hp*mem_hp_l_61+a2_hp*mem_hp_l_62-b1_hp*mem_hp_l_63-b2_hp*mem_hp_l_64;
mem_hp_l_62 = mem_hp_l_61;
mem_hp_l_61 = out_hp_l_5;
mem_hp_l_64 = mem_hp_l_63;
mem_hp_l_63 = out_hp_l_6;
out_hp_l = out_hp_l_6;
);
) : (
out_hp_l = inl;
);
//*********************************************
//lp
n_lp > 0 ? (
out_lp_l_1 = a0_lp*out_hp_l+a1_lp*mem_lp_l_11+a2_lp*mem_lp_l_12-b1_lp*mem_lp_l_13-b2_lp*mem_lp_l_14;
mem_lp_l_12 = mem_lp_l_11;
mem_lp_l_11 = out_hp_l;
mem_lp_l_14 = mem_lp_l_13;
mem_lp_l_13 = out_lp_l_1;
out_lp_l = out_lp_l_1;
n_lp > 1 ? (
out_lp_l_2 = a0_lp*out_lp_l_1+a1_lp*mem_lp_l_21+a2_lp*mem_lp_l_22-b1_lp*mem_lp_l_23-b2_lp*mem_lp_l_24;
mem_lp_l_22 = mem_lp_l_21;
mem_lp_l_21 = out_lp_l_1;
mem_lp_l_24 = mem_lp_l_23;
mem_lp_l_23 = out_lp_l_2;
out_lp_l = out_lp_l_2;
);
n_lp > 2 ? (
out_lp_l_3 = a0_lp*out_lp_l_2+a1_lp*mem_lp_l_31+a2_lp*mem_lp_l_32-b1_lp*mem_lp_l_33-b2_lp*mem_lp_l_34;
mem_lp_l_32 = mem_lp_l_31;
mem_lp_l_31 = out_lp_l_2;
mem_lp_l_34 = mem_lp_l_33;
mem_lp_l_33 = out_lp_l_3;
out_lp_l = out_lp_l_3;
);
n_lp > 3 ? (
out_lp_l_4 = a0_lp*out_lp_l_3+a1_lp*mem_lp_l_41+a2_lp*mem_lp_l_42-b1_lp*mem_lp_l_43-b2_lp*mem_lp_l_44;
mem_lp_l_42 = mem_lp_l_41;
mem_lp_l_41 = out_lp_l_3;
mem_lp_l_44 = mem_lp_l_43;
mem_lp_l_43 = out_lp_l_4;
out_lp_l = out_lp_l_4;
);
n_lp > 4 ? (
out_lp_l_5 = a0_lp*out_lp_l_4+a1_lp*mem_lp_l_51+a2_lp*mem_lp_l_52-b1_lp*mem_lp_l_53-b2_lp*mem_lp_l_54;
mem_lp_l_52 = mem_lp_l_51;
mem_lp_l_51 = out_lp_l_4;
mem_lp_l_54 = mem_lp_l_53;
mem_lp_l_53 = out_lp_l_5;
out_lp_l = out_lp_l_5;
);
n_lp > 5 ? (
out_lp_l_6 = a0_lp*out_lp_l_5+a1_lp*mem_lp_l_61+a2_lp*mem_lp_l_62-b1_lp*mem_lp_l_63-b2_lp*mem_lp_l_64;
mem_lp_l_62 = mem_lp_l_61;
mem_lp_l_61 = out_lp_l_5;
mem_lp_l_64 = mem_lp_l_63;
mem_lp_l_63 = out_lp_l_6;
out_lp_l = out_lp_l_6;
);
) : (
out_lp_l = out_hp_l;
);

//out mono
spl0 = spl1 = out_lp_l*outgain;

//*****************************************************************************
//stereo
) : (
inl = spl0;
inr = spl1;
//********************************************* 
//hp
n_hp > 0 ? (
out_hp_l_1 = a0_hp*inl+a1_hp*mem_hp_l_11+a2_hp*mem_hp_l_12-b1_hp*mem_hp_l_13-b2_hp*mem_hp_l_14;
mem_hp_l_12 = mem_hp_l_11;
mem_hp_l_11 = inl;
mem_hp_l_14 = mem_hp_l_13;
mem_hp_l_13 = out_hp_l_1;
out_hp_l = out_hp_l_1;
out_hp_r_1 = a0_hp*inr+a1_hp*mem_hp_r_11+a2_hp*mem_hp_r_12-b1_hp*mem_hp_r_13-b2_hp*mem_hp_r_14;
mem_hp_r_12 = mem_hp_r_11;
mem_hp_r_11 = inr;
mem_hp_r_14 = mem_hp_r_13;
mem_hp_r_13 = out_hp_r_1;
out_hp_r = out_hp_r_1;
n_hp > 1 ? (
out_hp_l_2 = a0_hp*out_hp_l_1+a1_hp*mem_hp_l_21+a2_hp*mem_hp_l_22-b1_hp*mem_hp_l_23-b2_hp*mem_hp_l_24;
mem_hp_l_22 = mem_hp_l_21;
mem_hp_l_21 = out_hp_l_1;
mem_hp_l_24 = mem_hp_l_23;
mem_hp_l_23 = out_hp_l_2;
out_hp_l = out_hp_l_2;
out_hp_r_2 = a0_hp*out_hp_r_1+a1_hp*mem_hp_r_21+a2_hp*mem_hp_r_22-b1_hp*mem_hp_r_23-b2_hp*mem_hp_r_24;
mem_hp_r_22 = mem_hp_r_21;
mem_hp_r_21 = out_hp_r_1;
mem_hp_r_24 = mem_hp_r_23;
mem_hp_r_23 = out_hp_r_2;
out_hp_r = out_hp_r_2;
);
n_hp > 2 ? (
out_hp_l_3 = a0_hp*out_hp_l_2+a1_hp*mem_hp_l_31+a2_hp*mem_hp_l_32-b1_hp*mem_hp_l_33-b2_hp*mem_hp_l_34;
mem_hp_l_32 = mem_hp_l_31;
mem_hp_l_31 = out_hp_l_2;
mem_hp_l_34 = mem_hp_l_33;
mem_hp_l_33 = out_hp_l_3;
out_hp_l = out_hp_l_3;
out_hp_r_3 = a0_hp*out_hp_r_2+a1_hp*mem_hp_r_31+a2_hp*mem_hp_r_32-b1_hp*mem_hp_r_33-b2_hp*mem_hp_r_34;
mem_hp_r_32 = mem_hp_r_31;
mem_hp_r_31 = out_hp_r_2;
mem_hp_r_34 = mem_hp_r_33;
mem_hp_r_33 = out_hp_r_3;
out_hp_r = out_hp_r_3;
);
n_hp > 3 ? (
out_hp_l_4 = a0_hp*out_hp_l_3+a1_hp*mem_hp_l_41+a2_hp*mem_hp_l_42-b1_hp*mem_hp_l_43-b2_hp*mem_hp_l_44;
mem_hp_l_42 = mem_hp_l_41;
mem_hp_l_41 = out_hp_l_3;
mem_hp_l_44 = mem_hp_l_43;
mem_hp_l_43 = out_hp_l_4;
out_hp_l = out_hp_l_4;
out_hp_r_4 = a0_hp*out_hp_r_3+a1_hp*mem_hp_r_41+a2_hp*mem_hp_r_42-b1_hp*mem_hp_r_43-b2_hp*mem_hp_r_44;
mem_hp_r_42 = mem_hp_r_41;
mem_hp_r_41 = out_hp_r_3;
mem_hp_r_44 = mem_hp_r_43;
mem_hp_r_43 = out_hp_r_4;
out_hp_r = out_hp_r_4;
);
n_hp > 4 ? (
out_hp_l_5 = a0_hp*out_hp_l_4+a1_hp*mem_hp_l_51+a2_hp*mem_hp_l_52-b1_hp*mem_hp_l_53-b2_hp*mem_hp_l_54;
mem_hp_l_52 = mem_hp_l_51;
mem_hp_l_51 = out_hp_l_4;
mem_hp_l_54 = mem_hp_l_53;
mem_hp_l_53 = out_hp_l_5;
out_hp_l = out_hp_l_5;
out_hp_r_5 = a0_hp*out_hp_r_4+a1_hp*mem_hp_r_51+a2_hp*mem_hp_r_52-b1_hp*mem_hp_r_53-b2_hp*mem_hp_r_54;
mem_hp_r_52 = mem_hp_r_51;
mem_hp_r_51 = out_hp_r_4;
mem_hp_r_54 = mem_hp_r_53;
mem_hp_r_53 = out_hp_r_5;
out_hp_r = out_hp_r_5;
);
n_hp > 5 ? (
out_hp_l_6 = a0_hp*out_hp_l_5+a1_hp*mem_hp_l_61+a2_hp*mem_hp_l_62-b1_hp*mem_hp_l_63-b2_hp*mem_hp_l_64;
mem_hp_l_62 = mem_hp_l_61;
mem_hp_l_61 = out_hp_l_5;
mem_hp_l_64 = mem_hp_l_63;
mem_hp_l_63 = out_hp_l_6;
out_hp_l = out_hp_l_6;
out_hp_r_6 = a0_hp*out_hp_r_5+a1_hp*mem_hp_r_61+a2_hp*mem_hp_r_62-b1_hp*mem_hp_r_63-b2_hp*mem_hp_r_64;
mem_hp_r_62 = mem_hp_r_61;
mem_hp_r_61 = out_hp_r_5;
mem_hp_r_64 = mem_hp_r_63;
mem_hp_r_63 = out_hp_r_6;
out_hp_r = out_hp_r_6;
);
) : (
out_hp_l = inl;
out_hp_r = inr;
);
//*********************************************
//lp
n_lp > 0 ? (
out_lp_l_1 = a0_lp*out_hp_l+a1_lp*mem_lp_l_11+a2_lp*mem_lp_l_12-b1_lp*mem_lp_l_13-b2_lp*mem_lp_l_14;
mem_lp_l_12 = mem_lp_l_11;
mem_lp_l_11 = out_hp_l;
mem_lp_l_14 = mem_lp_l_13;
mem_lp_l_13 = out_lp_l_1;
out_lp_l = out_lp_l_1;
out_lp_r_1 = a0_lp*out_hp_r+a1_lp*mem_lp_r_11+a2_lp*mem_lp_r_12-b1_lp*mem_lp_r_13-b2_lp*mem_lp_r_14;
mem_lp_r_12 = mem_lp_r_11;
mem_lp_r_11 = out_hp_r;
mem_lp_r_14 = mem_lp_r_13;
mem_lp_r_13 = out_lp_r_1;
out_lp_r = out_lp_r_1;
n_lp > 1 ? (
out_lp_l_2 = a0_lp*out_lp_l_1+a1_lp*mem_lp_l_21+a2_lp*mem_lp_l_22-b1_lp*mem_lp_l_23-b2_lp*mem_lp_l_24;
mem_lp_l_22 = mem_lp_l_21;
mem_lp_l_21 = out_lp_l_1;
mem_lp_l_24 = mem_lp_l_23;
mem_lp_l_23 = out_lp_l_2;
out_lp_l = out_lp_l_2;
out_lp_r_2 = a0_lp*out_lp_r_1+a1_lp*mem_lp_r_21+a2_lp*mem_lp_r_22-b1_lp*mem_lp_r_23-b2_lp*mem_lp_r_24;
mem_lp_r_22 = mem_lp_r_21;
mem_lp_r_21 = out_lp_r_1;
mem_lp_r_24 = mem_lp_r_23;
mem_lp_r_23 = out_lp_r_2;
out_lp_r = out_lp_r_2;
);
n_lp > 2 ? (
out_lp_l_3 = a0_lp*out_lp_l_2+a1_lp*mem_lp_l_31+a2_lp*mem_lp_l_32-b1_lp*mem_lp_l_33-b2_lp*mem_lp_l_34;
mem_lp_l_32 = mem_lp_l_31;
mem_lp_l_31 = out_lp_l_2;
mem_lp_l_34 = mem_lp_l_33;
mem_lp_l_33 = out_lp_l_3;
out_lp_l = out_lp_l_3;
out_lp_r_3 = a0_lp*out_lp_r_2+a1_lp*mem_lp_r_31+a2_lp*mem_lp_r_32-b1_lp*mem_lp_r_33-b2_lp*mem_lp_r_34;
mem_lp_r_32 = mem_lp_r_31;
mem_lp_r_31 = out_lp_r_2;
mem_lp_r_34 = mem_lp_r_33;
mem_lp_r_33 = out_lp_r_3;
out_lp_r = out_lp_r_3;
);
n_lp > 3 ? (
out_lp_l_4 = a0_lp*out_lp_l_3+a1_lp*mem_lp_l_41+a2_lp*mem_lp_l_42-b1_lp*mem_lp_l_43-b2_lp*mem_lp_l_44;
mem_lp_l_42 = mem_lp_l_41;
mem_lp_l_41 = out_lp_l_3;
mem_lp_l_44 = mem_lp_l_43;
mem_lp_l_43 = out_lp_l_4;
out_lp_l = out_lp_l_4;
out_lp_r_4 = a0_lp*out_lp_r_3+a1_lp*mem_lp_r_41+a2_lp*mem_lp_r_42-b1_lp*mem_lp_r_43-b2_lp*mem_lp_r_44;
mem_lp_r_42 = mem_lp_r_41;
mem_lp_r_41 = out_lp_r_3;
mem_lp_r_44 = mem_lp_r_43;
mem_lp_r_43 = out_lp_r_4;
out_lp_r = out_lp_r_4;
);
n_lp > 4 ? (
out_lp_l_5 = a0_lp*out_lp_l_4+a1_lp*mem_lp_l_51+a2_lp*mem_lp_l_52-b1_lp*mem_lp_l_53-b2_lp*mem_lp_l_54;
mem_lp_l_52 = mem_lp_l_51;
mem_lp_l_51 = out_lp_l_4;
mem_lp_l_54 = mem_lp_l_53;
mem_lp_l_53 = out_lp_l_5;
out_lp_l = out_lp_l_5;
out_lp_r_5 = a0_lp*out_lp_r_4+a1_lp*mem_lp_r_51+a2_lp*mem_lp_r_52-b1_lp*mem_lp_r_53-b2_lp*mem_lp_r_54;
mem_lp_r_52 = mem_lp_r_51;
mem_lp_r_51 = out_lp_r_4;
mem_lp_r_54 = mem_lp_r_53;
mem_lp_r_53 = out_lp_r_5;
out_lp_r = out_lp_r_5;
);
n_lp > 5 ? (
out_lp_l_6 = a0_lp*out_lp_l_5+a1_lp*mem_lp_l_61+a2_lp*mem_lp_l_62-b1_lp*mem_lp_l_63-b2_lp*mem_lp_l_64;
mem_lp_l_62 = mem_lp_l_61;
mem_lp_l_61 = out_lp_l_5;
mem_lp_l_64 = mem_lp_l_63;
mem_lp_l_63 = out_lp_l_6;
out_lp_l = out_lp_l_6;
out_lp_r_6 = a0_lp*out_lp_r_5+a1_lp*mem_lp_r_61+a2_lp*mem_lp_r_62-b1_lp*mem_lp_r_63-b2_lp*mem_lp_r_64;
mem_lp_r_62 = mem_lp_r_61;
mem_lp_r_61 = out_lp_r_5;
mem_lp_r_64 = mem_lp_r_63;
mem_lp_r_63 = out_lp_r_6;
out_lp_r = out_lp_r_6;
);
) : (
out_lp_l = out_hp_l;
out_lp_r = out_hp_r;
);

//out stereo
spl0 = out_lp_l*outgain;
spl1 = out_lp_r*outgain;

);
);

function apple12gfx() (

resii = (8-0)/(16-(-16))*(slider4-16)+8;
resiii = (8-0)/(16-(-16))*(slider7-16)+8;

              ui_split_topratio(1/10);
                ui_automate(slider63, multipleway_switch(slider63, "hp", 1, 20, 12));
            ui_split_next();
                ui_automate(slider63, multipleway_switch(slider63, "lp", 2, 20, 12));
            ui_split_next();ui_split_next();
            
            
            slider63 == 1 ? ( //hp
            slider5 = 0;
                    ui_automate(slider2, multipleway_switch(slider2, "off", 0, 20, 12));
                ui_split_next();
                    ui_automate(slider2, multipleway_switch(slider2, "12dB", 1, 20, 12));
                ui_split_next();
                    ui_automate(slider2, multipleway_switch(slider2, "24dB", 2, 20, 12));
                ui_split_next();
                    ui_automate(slider2, multipleway_switch(slider2, "36dB", 3, 20, 12));
                ui_split_next();
                    ui_automate(slider2, multipleway_switch(slider2, "48dB", 4, 20, 12));
                ui_split_next();
                    ui_automate(slider2, multipleway_switch(slider2, "60dB", 5, 20, 12));
                ui_split_next();
                    ui_automate(slider2, multipleway_switch(slider2, "72dB", 6, 20, 12));
            ui_pop();
        ui_pop();
                
                //WINDOW
        ui_split_leftratio(0.6);
            ui_split_topratio(1/2);
                slider2 == 1 ? (
                    draw_hp(slider3, 12, slider4, 0, 100, -16, 16);
                ) : slider2 == 2 ? (
                    draw_hp(slider3, 24, slider4, 0, 100, -16, 16);
                ) : slider2 == 3 ? (
                    draw_hp(slider3, 36, slider4, 0, 100, -16, 16);
                ) : slider2 == 4 ? (
                    draw_hp(slider3, 48, slider4, 0, 100, -16, 16);
                ) : slider2 == 5 ? (
                    draw_hp(slider3, 60, slider4, 0, 100, -16, 16);
                ) : slider2 == 6 ? (
                    draw_hp(slider3, 72, slider4, 0, 100, -16, 16);
                );
                    
            ui_split_next();
                ui_split_leftratio(1/2);
                    ui_automate(slider3, labelled_dial(slider3, 0, 0, 100, 0, "cutoff", floor(exp((16+slider3*1.20103)*log(1.059))*8.17742), "%i Hz", 60,60,12)); 
                ui_split_next("");
                    ui_automate(slider4, labelled_dial(slider4, 0, -16, 16, 0, "reso", slider4, "%.1f", 50,50,12));
                ui_pop();
          
          
          ) : slider63 == 2 ? (//lp
              slider2 = 0;
                    ui_automate(slider5, multipleway_switch(slider5, "off", 0, 20, 12));
                ui_split_next();
                    ui_automate(slider5, multipleway_switch(slider5, "12dB", 1, 20, 12));
                ui_split_next();
                    ui_automate(slider5, multipleway_switch(slider5, "24dB", 2, 20, 12));
                ui_split_next();
                    ui_automate(slider5, multipleway_switch(slider5, "36dB", 3, 20, 12));
                ui_split_next();
                    ui_automate(slider5, multipleway_switch(slider5, "48dB", 4, 20, 12));
                ui_split_next();
                    ui_automate(slider5, multipleway_switch(slider5, "60dB", 5, 20, 12));
                ui_split_next();
                    ui_automate(slider5, multipleway_switch(slider5, "72dB", 6, 20, 12));
            ui_pop();
        ui_pop();
                
                //WINDOW
        ui_split_leftratio(0.6);
            ui_split_topratio(1/2);
               slider5 == 1 ? (
                    draw_lp(slider6, 12, slider7, 0, 100, -16, 16);
                ) : slider5 == 2 ? (
                    draw_lp(slider6, 24, slider7, 0, 100, -16, 16);
                ) : slider5 == 3 ? (
                    draw_lp(slider6, 36, slider7, 0, 100, -16, 16);
                ) : slider5 == 4 ? (
                    draw_lp(slider6, 48, slider7, 0, 100, -16, 16);
                ) : slider5 == 5 ? (
                    draw_lp(slider6, 60, slider7, 0, 100, -16, 16);
                ) : slider5 == 6 ? (
                    draw_lp(slider6, 72, slider7, 0, 100, -16, 16);
                );
                
            ui_split_next();
                ui_split_leftratio(1/2);
                    ui_automate(slider6, labelled_dial(slider6, 0, 0, 100, 0, "cutoff", floor(exp((16+slider6*1.20103)*log(1.059))*8.17742), "%i Hz", 60,60,12)); 
                ui_split_next("");
                    ui_automate(slider7, labelled_dial(slider7, 0, -16, 16, 0, "reso", slider7, "%.1f", 50,50,12));
                ui_pop();
          );  
);
