// (C) 2008-2009, Lubomir I. Ivanov

// NO WARRANTY IS GRANTED. THIS PLUG-IN IS PROVIDED ON AN "AS IS" BASIS, WITHOUT
// WARRANTY OF ANY KIND. NO LIABILITY IS GRANTED, INCLUDING, BUT NOT LIMITED TO,
// ANY DIRECT OR INDIRECT,  SPECIAL,  INCIDENTAL OR CONSEQUENTIAL DAMAGE ARISING
// OUT OF  THE  USE  OR INABILITY  TO  USE  THIS PLUG-IN,  COMPUTER FAILTURE  OF
// MALFUNCTION INCLUDED.  THE USE OF THE SOURCE CODE,  EITHER  PARTIALLY  OR  IN
// TOTAL, IS ONLY GRANTED,  IF USED IN THE SENSE OF THE AUTHOR'S INTENTION,  AND
// USED WITH ACKNOWLEDGEMENT OF THE AUTHOR. FURTHERMORE IS THIS PLUG-IN A  THIRD
// PARTY CONTRIBUTION,  EVEN IF INCLUDED IN REAPER(TM),  COCKOS INCORPORATED  OR
// ITS AFFILIATES HAVE NOTHING TO DO WITH IT.  LAST BUT NOT LEAST, BY USING THIS
// PLUG-IN YOU RELINQUISH YOUR CLAIM TO SUE IT'S AUTHOR, AS WELL AS THE CLAIM TO
// ENTRUST SOMEBODY ELSE WITH DOING SO.
// 
// Released under GPL:
// <http://www.gnu.org/licenses/>.

//=================================================
//author:Liteon

@init

function simpleslider() (
//mono
mono = slider30;

//type
hp = slider31;

//exp scale
sx = 16+slider32*1.20103;
cutoff = floor(exp(sx*log(1.059))*8.17742);

//coeff
cutoff = min(cutoff,20000);
lp_cut = 2*$pi*cutoff;
lp_n = 1/(lp_cut+ 3*srate);
lp_b1 = (3*srate - lp_cut)*lp_n;
lp_a0 = lp_cut*lp_n;
);

function simplesample() (
//stereo
mono == 0 ? (

//recursion
inl = spl0;
inr = spl1;
lp_outl = 2*inl*lp_a0 + lp_outl*lp_b1;
lp_outr = 2*inr*lp_a0 + lp_outr*lp_b1;

//type
hp == 0 ? (
  spl0 = lp_outl*outgain;
  spl1 = lp_outr*outgain;
) : (
  spl0 = (inl-lp_outl)*outgain;
  spl1 = (inr-lp_outr)*outgain;
);

) : (
//mono

//recursion
inl = (spl0+spl1)/2;
lp_outl = 2*inl*lp_a0 + lp_outl*lp_b1;

//type
hp == 0 ? (
  spl0=spl1=lp_outl*outgain;
) : (
  spl0=spl1=(inl-lp_outl)*outgain;
);

);
);

function simplegfx() (
            ui_split_topratio(1/10);
            ui_automate(slider31, multipleway_switch(slider31, "lp", 0, 20, 12));
            ui_split_next();
                ui_automate(slider31, multipleway_switch(slider31, "hp", 1, 20, 12));
            ui_split_next();ui_split_next();
            
            
            slider31 == 0 ? ( //lp
                ui_pop();
        ui_pop();
                
                //WINDOW
        ui_split_leftratio(0.6);
            ui_split_topratio(1/2);
                draw_lp(slider32, 12, 0, 0, 100, 0, 0);

            ui_split_next();
                    ui_automate(slider32, labelled_dial(slider32, 0, 0, 100, 0, "cutoff", floor(exp((16+slider32*1.20103)*log(1.059))*8.17742), "%i Hz", 60,60,12)); 
          
          
          ) : slider31 == 1 ? (//hp
            ui_pop();
        ui_pop();
                
                //WINDOW
        ui_split_leftratio(0.6);
            ui_split_topratio(1/2);
                draw_hp(slider32, 12, 0, 0, 100, 0, 0);
            
            ui_split_next();
                    ui_automate(slider32, labelled_dial(slider32, 0, 0, 100, 0, "cutoff", floor(exp((16+slider32*1.20103)*log(1.059))*8.17742), "%i Hz", 60,60,12)); 
        );
);
