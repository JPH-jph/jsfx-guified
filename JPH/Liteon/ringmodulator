// (C) 2008-2009, Lubomir I. Ivanov
//
// NO WARRANTY IS GRANTED. THIS PLUG-IN IS PROVIDED ON AN "AS IS" BASIS, WITHOUT
// WARRANTY OF ANY KIND. NO LIABILITY IS GRANTED, INCLUDING, BUT NOT LIMITED TO,
// ANY DIRECT OR INDIRECT,  SPECIAL,  INCIDENTAL OR CONSEQUENTIAL DAMAGE ARISING
// OUT OF  THE  USE  OR INABILITY  TO  USE  THIS PLUG-IN,  COMPUTER FAILTURE  OF
// MALFUNCTION INCLUDED.  THE USE OF THE SOURCE CODE,  EITHER  PARTIALLY  OR  IN
// TOTAL, IS ONLY GRANTED,  IF USED IN THE SENSE OF THE AUTHOR'S INTENTION,  AND
// USED WITH ACKNOWLEDGEMENT OF THE AUTHOR. FURTHERMORE IS THIS PLUG-IN A  THIRD
// PARTY CONTRIBUTION,  EVEN IF INCLUDED IN REAPER(TM),  COCKOS INCORPORATED  OR
// ITS AFFILIATES HAVE NOTHING TO DO WITH IT.  LAST BUT NOT LEAST, BY USING THIS
// PLUG-IN YOU RELINQUISH YOUR CLAIM TO SUE IT'S AUTHOR, AS WELL AS THE CLAIM TO
// ENTRUST SOMEBODY ELSE WITH DOING SO.
// 
// Released under GPL:
// <http://www.gnu.org/licenses/>.

//=================================================
desc:Ring Modulator - GUI
//tags: processing amplitude modulation
//author: Liteon

//////////////////////////////////////////
import ../ui-lib/ui-lib.jsfx-inc
import ../ui-lib/ui-lib-compat.jsfx-inc
filename:0,../ui-lib/bitmap/theme-dark-orange.png
filename:1,../ui-lib/bitmap/theme-light-orange.png
filename:2,../ui-lib/bitmap/theme-sunny.png
filename:3,../ui-lib/bitmap/theme-retro.png
filename:4,../ui-lib/bitmap/theme-blue.png
filename:5,../ui-lib/bitmap/theme-pattern.png
//////////////////////////////////////////

//=================================================

slider1:0<0,1,1{Stereo,Mono}>-Processing
slider2:0<0,1,1{Off,On}>-Mod Input Diode (Waveshaper)
slider3:40<0,100,0.01>-Mod Frequency (Scale)
slider4:0<0,100,0.01>-Feedback (%)
slider5:10<0,100,0.01>-Non-Linearities (%)
slider6:100<0,100,0.01>-Mix (%)
slider7:0<-40,40,0.01>-Output (-inf/+40dB)
slider8:0<0,1,1{Off,On}>-Oversample (x2)
slider14:0<0,6,1>-Theme

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

//=================================================
@init
///////////////////////
bufferlength = ceil(srate*1);
buffer0 = 0;
buffer1 = buffer0 + bufferlength;
bufferpeak = buffer1 + bufferlength;
freemem = bufferpeak + bufferlength;
freemem = ui_setup(freemem); // returns the first index it's not using
///////////////////////

//=================================================
//2*pi
pi2 = 2*$pi;

//sim resistance
r = 0.85;

//fir restoration filter
c1 = 1;
c2 = -0.75;
c3 = 0.17;
fgain = 4;

//fir bandlimit
bl_c1 = 0.52;
bl_c2 = 0.54;
bl_c3 = -0.02;

/////////////////////////////////////////
//           @slider code              //
needs_slider_update=1;
function slider_update()
(
needs_slider_update=0;
mono = slider1;

os = slider8;

sx = 16+slider3*1.20103;
tgt_f = floor(exp(sx*log(1.059))*8.17742);

fb = slider4/100;
tgt_mix = slider6/100;
diode = slider2;
nl = slider5;

slider7 == -40 ? outgain = 0 : outgain = 10^(slider7/20);
    
slider14 < 1 ? (
    file=0;
) : slider14 < 2 ? (
    file=1;
) : slider14 < 3 ? (
    file=2;
) : slider14 < 5 ? (
    file=3;
) : slider14 < 6 ? (
    file=4;
) : slider14 < 7 ? (
    file=5;
);

);
//////////////////////////////////////

//=================================================
@slider
// ui:gfx function=custom_gfx_func, height=300

//=================================================
@block
//=================================================
//interpolate 'f'
d_f = (tgt_f-src_f)/samplesblock;
tf = src_f;
src_f = tgt_f;

//interpolate 'mix'
d_mix = (tgt_mix-src_mix)/samplesblock;
tmix = src_mix;
src_mix = tgt_mix;

needs_slider_update ? slider_update();

@sample
//=================================================
// set mod signal
//=================================================
//a couple of pseudo non-linearities for 'f' and 'fb'
nl > 0 ? (
nl_f = rand(4*nl)-2*nl;
nl_fb = (rand(2*nl)-nl)*0.001;
) : (
nl_f = nl_fb = 0;
);

//interpolate 'f'
tf += d_f;

//interpolate 'mix'
tmix += d_mix;

//mod signal gen
sina = pi2*(tf-nl_f)/srate;
sinout = sin(sinp);
sinp = sinp+sina;
sinp >= pi2 ? sinp -= pi2;

//diode - positive semi-periods
diode == 0 ? (
  m_out = sinout;
) : (
  //os - diode-ed signal?
  os == 0 ? (
    //abs()
    d_sin = abs(sinout)*2-0.20260;
  ) : (
    //power series in
    ps_sin_out1 = 0.5*(sinout+ps_sin_out2);
    ps_sin_out2 = 0.5*ps_sin_out1;
    //abs()
    ps_d_sin1 = abs(ps_sin_out1)*2-0.20260;
    ps_d_sin2 = abs(ps_sin_out2)*2-0.20260;
    //bandlimit    
    sin_bl3_1 = sin_bl2_1;
    sin_bl3_2 = sin_bl2_2;
    sin_bl2_1 = sin_bl1_1;
    sin_bl2_2 = sin_bl1_2;
    sin_bl1_1 = ps_d_sin1;
    sin_bl1_2 = ps_d_sin2;
    sin_bl_out1 = (sin_bl1_1*bl_c1 + sin_bl2_1*bl_c2 + sin_bl3_1*bl_c3);
    sin_bl_out2 = (sin_bl1_2*bl_c1 + sin_bl2_2*bl_c2 + sin_bl3_2*bl_c3);
    //power series out
    o_sin_out1 = 0.5*(sin_bl_out1+o_sin_out2);
    o_sin_out2 = 0.5*(sin_bl_out2+o_sin_out1);  
    //fir restoration
    s3 = s2;  
    s2 = s1;
    s1 = o_sin_out1;
    d_sin = (s1*c1+s2*c2+s3*c3)*fgain;   
  );
  m_out = d_sin
);

//no feedback?
fb == 0 ? nl_fb = 0;

//=================================================
//fx mono
//=================================================
mono == 1 ? (

//-------------------------------------------------
//input
//-------------------------------------------------
in_l = (spl0+spl1)/2;

//-------------------------------------------------
//os - no 
//-------------------------------------------------
os == 0 ? (

//feedback ala Paul Kellet
fp_l = (in_l+(fb-nl_fb)*fp_l)*sinout*r;
//multiply carrier with mod
s_out_l = m_out*in_l;
//apply feedback
s_out_l += fp_l;

fx_outl = s_out_l;

) : (

//-------------------------------------------------
//os - yes 
//-------------------------------------------------

//power series in
ps_fx_out1l = 0.5*(in_l+ps_fx_out2l);
ps_fx_out2l = 0.5*ps_fx_out1l;

//------------------------
//fx
//------------------------
fp_l_os_1 = (ps_fx_out1l+(fb-nl_fb)*fp_l_os_1)*sinout*r;
s_out_l_os_1 = m_out*ps_fx_out1l;
s_out_l_os_1 += fp_l_os_1;

fp_l_os_2 = (ps_fx_out2l+(fb-nl_fb)*fp_l_os_2)*sinout*r;
s_out_l_os_2 = m_out*ps_fx_out2l;
s_out_l_os_2 += fp_l_os_2;

//------------------------
//bandlimit
//------------------------
bl3_1 = bl2_1;
bl3_2 = bl2_2;

bl2_1 = bl1_1;
bl2_2 = bl1_2;

bl1_1 = s_out_l_os_1;
bl1_2 = s_out_l_os_2;

bl_out1 = (bl1_1*bl_c1 + bl2_1*bl_c2 + bl3_1*bl_c3);
bl_out2 = (bl1_2*bl_c1 + bl2_2*bl_c2 + bl3_2*bl_c3);

//------------------------
//power series out
//------------------------
o_fx_out1l = 0.5*(bl_out1+o_fx_out2l);
o_fx_out2l = 0.5*(bl_out2+o_fx_out1l);  

//fir restoration
s3l = s2l;  
s2l = s1l;
s1l = o_fx_out1l;

fx_outl = (s1l*c1+s2l*c2+s3l*c3)*fgain;

);

//------------------------
//mixer
//------------------------
out_l = fx_outl*(tmix)+in_l*(1-tmix);
spl1 = spl0 = out_l*r*outgain;

):(
//=================================================
//fx stereo
//=================================================

in_l = spl0;
in_r = spl1;

//-------------------------------------------------
//os - no 
//-------------------------------------------------
os == 0 ? (

fp_l = (in_l+(fb-nl_fb)*fp_l)*sinout*r;
s_out_l = m_out*in_l;
s_out_l += fp_l;
out_l = s_out_l*(tmix)+in_l*(1-tmix);
fx_outl = out_l*r*outgain;

fp_r = (in_r+(fb-nl_fb)*fp_r)*sinout*r;
s_out_r = m_out*in_r;
s_out_r += fp_r;
out_r = s_out_r*(tmix)+in_r*(1-tmix);
fx_outr = out_r*r*outgain;

) : (

//-------------------------------------------------
//os - yes 
//-------------------------------------------------

//power series in
ps_fx_out1l = 0.5*(in_l+ps_fx_out2l);
ps_fx_out2l = 0.5*ps_fx_out1l;

ps_fx_out1r = 0.5*(in_r+ps_fx_out2r);
ps_fx_out2r = 0.5*ps_fx_out1r;

//------------------------
//fx
//------------------------
fp_l_os_1 = (ps_fx_out1l+(fb-nl_fb)*fp_l_os_1)*sinout*r;
s_out_l_os_1 = m_out*ps_fx_out1l;
s_out_l_os_1 += fp_l_os_1;

fp_l_os_2 = (ps_fx_out2l+(fb-nl_fb)*fp_l_os_2)*sinout*r;
s_out_l_os_2 = m_out*ps_fx_out2l;
s_out_l_os_2 += fp_l_os_2;

fp_r_os_1 = (ps_fx_out1r+(fb-nl_fb)*fp_r_os_1)*sinout*r;
s_out_r_os_1 = m_out*ps_fx_out1r;
s_out_r_os_1 += fp_r_os_1;

fp_r_os_2 = (ps_fx_out2r+(fb-nl_fb)*fp_r_os_2)*sinout*r;
s_out_r_os_2 = m_out*ps_fx_out2r;
s_out_r_os_2 += fp_r_os_2;

//------------------------
//bandlimit
//------------------------
bl3_l1 = bl2_l1;
bl3_r1 = bl2_r1;
bl3_l2 = bl2_l2;
bl3_r2 = bl2_r2;

bl2_l1 = bl1_l1;
bl2_r1 = bl1_r1;
bl2_l2 = bl1_l2;
bl2_r2 = bl1_r2;

bl1_l1 = s_out_l_os_1;
bl1_r1 = s_out_r_os_1;
bl1_l2 = s_out_l_os_2;
bl1_r2 = s_out_r_os_2;

bl_out1l = (bl1_l1*bl_c1 + bl2_l1*bl_c2 + bl3_l1*bl_c3);
bl_out1r = (bl1_r1*bl_c1 + bl2_r1*bl_c2 + bl3_r1*bl_c3);
bl_out2l = (bl1_l2*bl_c1 + bl2_l2*bl_c2 + bl3_l2*bl_c3);
bl_out2r = (bl1_r2*bl_c1 + bl2_r2*bl_c2 + bl3_r2*bl_c3);

//------------------------
//power series out
//------------------------
o_fx_out1l = 0.5*(bl_out1l+o_fx_out2l);
o_fx_out2l = 0.5*(bl_out2l+o_fx_out1l);  

o_fx_out1r = 0.5*(bl_out1r+o_fx_out2r);
o_fx_out2r = 0.5*(bl_out2r+o_fx_out1r);  

//------------------------
//fir restoration
//------------------------
s3l = s2l;  
s2l = s1l;
s1l = o_fx_out1l;
fx_outl = (s1l*c1+s2l*c2+s3l*c3)*fgain;

s3r = s2r;  
s2r = s1r;
s1r = o_fx_out1r;
fx_outr = (s1r*c1+s2r*c2+s3r*c3)*fgain;

);

//------------------------
//mixer
//------------------------
out_l = fx_outl*(tmix)+in_l*(1-tmix);
out_r = fx_outr*(tmix)+in_r*(1-tmix);
spl0 = out_l*r*outgain;
spl1 = out_r*r*outgain;

);

//=================================================
@gfx 600 250

control_start("main", "bitmap-simple", file);

ui_screen() == "main" ? (
title_desc("Ring Modulator", "processing | amplitude | modulation");

        ui_split_leftratio(4/20);
        control_group("");
            ui_split_topratio(1/3);
                ui_automate(slider1, labelled_switch(slider1, "stereo", "mono"));
            ui_split_next();
                ui_automate(slider2, labelled_switch(slider2, "off", "diode"));
            ui_split_next();
                ui_automate(slider8, labelled_switch(slider8, "x2 off", "x2 on"));
            ui_pop();
        ui_pop();
        
        ui_split_leftratio(3/5);
        control_group("");
            ui_split_leftratio(1/3);
                    ui_automate(slider3, labelled_dial(slider3, 40, 0, 100, 0, "frequency", slider3, "%i %%", 50, 50, 14));
                ui_push_below(140);
                    ui_textnumber(tgt_f, "%.i Hz"); 
                ui_pop();
            ui_split_next();
                ui_automate(slider4, labelled_dial(slider4, 0, 0, 100, 0, "feedback", slider4, "%i %%", 50, 50, 14));
            ui_split_next();
                ui_automate(slider5, labelled_dial(slider5, 10, 0, 100, 0, "non-linear", slider5, "%i %%", 50, 50, 14));
            ui_pop();
        
        ui_split_next();
        control_group("");
        ui_split_leftratio(1/2);
            ui_automate(slider6, labelled_dial(slider6, 100, 0, 100, 0, "mix", slider6, "%.i %%", 50, 50, 14));
        ui_split_next();
            ui_automate(slider7, labelled_dial(slider7, 0, -40, 40, 0, "output", slider7, "%.1f dB", 50, 50, 14));
        ui_pop(); 
 
) : ui_screen() == "opts" ? (
  control_navbar("about", -1, -1);

  ui_pad();

  ui_font(#face, 15, 0, 0);
  ui_align(0, -1);
  
  text_height = ui_wraptext("author: Liteon

editor: JPH
-GUI (using Geraint Luff's API)");
ui_align(.5, -1);
ui_split_rightratio(0.2);
    control_group("");
    slider14 = labelled_dial(slider14, 0, 0, 6, 0, "theme", slider14, "%i", 50,50,14);
ui_pop();

) : ui_system();

ui_interacted() ? needs_slider_update = 1;

