desc:Wahriffic - GUI
tags: filter non-linear wah
version: 0.03
author: Joep Vanlier
changelog: First commit
provides: wah_models.jsfx-inc
license: MIT

Weeping Demon emulation based on code by Chet Gnegy (https://ccrma.stanford.edu/~chet/)
Crybaby, based on paper: M. Holters et al, “Physical modelling of a wah-wah effect pedal as a case study for application of the nodal DK method to circuits with variable parts.”, Proc. Digital Audio Effects (DAFx-11), Paris, France (2011): 31-35

import /inc/saike_upsamplers.jsfx-inc
import /inc/wah_models.jsfx-inc

//////////////////////////////////////////
import ../ui-lib/ui-lib.jsfx-inc
import ../ui-lib/ui-lib-compat.jsfx-inc
filename:0,../ui-lib/bitmap/theme-dark-orange.png
filename:1,../ui-lib/bitmap/theme-light-orange.png
filename:2,../ui-lib/bitmap/theme-sunny.png
filename:3,../ui-lib/bitmap/theme-retro.png
filename:4,../ui-lib/bitmap/theme-blue.png
filename:5,../ui-lib/bitmap/theme-pattern.png
//////////////////////////////////////////

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

slider1:Model=0:<0,2,1{Weeping Demon Mode 1,Weeping Demon Mode 2,Crybaby (Warning: CPU intensive / high drive needs oversampling x2)>-Model
slider3:Drive=0<-6,24,1>-Drive (dB)
slider4:PostGain=0<-48,24,1>-Post Gain (dB)
slider10:Limit=1<0,1,1{Disabled,Enabled}>-Limit to 0 dBFS
slider13:Cutoff=1<0,1,.0001>-Cutoff
slider14:Resonance=0<0,1,.0001>-Cutoff 2
slider15:Grunge=0<0,1,.0001>-Grunge
slider17:Inertia=1<0,1,1<{Off,On}>-Inertia
slider60:Oversampling=2<1,3,1>-Oversampling
slider41:0<0,6,1>-Theme

@init
///////////////////////
bufferlength = ceil(srate*1);
buffer0 = 0;
buffer1 = buffer0 + bufferlength;
bufferpeak = buffer1 + bufferlength;
freemem = bufferpeak + bufferlength;
freemem = ui_setup(freemem); // returns the first index it's not using
///////////////////////

  function prepLerp(slideridx_in, memloc_in, currentValue, linear)
    instance(slideridx, ptr, memloc, cur_x, cur_y, next, delta, nextVal, prevVal)
    local(next_x, next_y, dx)
    global(samplesblock)
    (
      ( linear ) ? (
        slideridx = slideridx_in;
        memloc = memloc_in;
      
        nextVal = currentValue;
        (samplesblock > 0) && ( samplesblock < 44100 ) ? (
          delta = (nextVal - prevVal) / (samplesblock);
          cur_y = prevVal;
        ) : (
          delta = 0;
          cur_y = nextVal;
        );
        
        // This ensures we never change delta (curSample is never negative)
        next = -10000;
        prevVal = nextVal;
      ) : (
        slideridx = slideridx_in;
        memloc = memloc_in;
        
        cur_x = 0;
        cur_y = currentValue;
        
        // Fetch the points
        ptr = memloc;
        while( (next_x = slider_next_chg(slideridx, next_y)) > -1 )
        (
          ptr[] = cur_x;
          ptr += 1;
          ptr[] = (next_y - cur_y) / (next_x - cur_x);
          ptr += 1;
          
          cur_x = next_x;
          cur_y = next_y;
        );
        ptr[]  = samplesblock;
        ptr[1] = 0;
        ptr[2] = -100;
              
        ptr = memloc;
        cur_y = currentValue;
        delta = 0;
        
        next = ptr[];
        prevVal = cur_y;
      );
    );

  function lerpSample()
    instance(slideridx, ptr, memloc, cur_x, cur_y, delta, next)
    global(curSample, potato)
    local()
    (
      ( next == curSample ) ? (
        ptr += 1;
        delta = ptr[];
        ptr += 1;
        next = ptr[];
      );
      
      cur_y += delta
    );

cutoff_mem  = 0;
reso_mem    = 10000;

/////////////////////////////////////////
//           @slider code              //
needs_slider_update=1;
function slider_update()
(
needs_slider_update=0;
preamp      = 10^(Drive/20);
inv_preamp  = 10^(-Drive/20)*10^(PostGain/20);

slider41 < 1 ? (
    file=0;
) : slider41 < 2 ? (
    file=1;
) : slider41 < 3 ? (
    file=2;
) : slider41 < 5 ? (
    file=3;
) : slider41 < 6 ? (
    file=4;
) : slider41 < 7 ? (
    file=5;
);

);
//////////////////////////////////////

@slider
needs_slider_update=1;

@block
needs_slider_update ? slider_update();
  function inertiaSmoothing(newval)
    instance(prev, val, boost)
    global()
    local(error, diff)
    (
      error   = (val - newval);
      diff    = val - prev;
      prev    = val;
      boost   = min(1, max(0, 15*abs(diff)-.1));
      val     = val - .3 * error - .7 * error * boost;
    );
    
  // Sample accurate lerp or inertial based?
  slider6 ?
  (
    cutoffLerp.prepLerp(13, cutoff_mem, inertia_cutoff.inertiaSmoothing( Cutoff ), 1);
    resoLerp.prepLerp(14, reso_mem, inertia_reso.inertiaSmoothing( Resonance ), 1);
  ) :
  (
    cutoffLerp.prepLerp(13, cutoff_mem, Cutoff, 0);
    resoLerp.prepLerp(14, reso_mem, Resonance, 0);
  );

@sample 
  // The dunlop requires some heavy computation that we only do when the samplerate changes
  ( lastSampleRate != overSampling*srate ) ? (
    lastSampleRate = overSampling*srate;
    dlopL.dlop_init_srate(overSampling*srate);
    dlopR.dlop_init_srate(overSampling*srate);
    s = 10;
  );

  function updateFilter()
  (
    ( Model == 0 ) ? (
      weepingL1.weeping_init(sliderCutoff, sliderReso, 0);
      weepingR1.weeping_init(sliderCutoff, sliderReso, 0);
    ) : ( Model == 1 ) ? (
      weepingL2.weeping_init(sliderCutoff, sliderReso, 1);
      weepingR2.weeping_init(sliderCutoff, sliderReso, 1);
    ) : ( Model == 2 ) ? (
      dlopL.dlop_init_cutoff(sliderCutoff, sliderReso);
      dlopR.dlop_init_cutoff(sliderCutoff, sliderReso);
    );
  );

  function processSample()
  (
    ( Model == 0 ) ? (
      outL = weepingL1.weeping_eval(inL+Grunge*inL*inL*inL);
      outR = weepingR1.weeping_eval(inR+Grunge*inR*inR*inR);
    ) : ( Model == 1 ) ? (
      outL = weepingL2.weeping_eval(inL+Grunge*inL*inL*inL);
      outR = weepingR2.weeping_eval(inR+Grunge*inR*inR*inR);        
    ) : ( Model == 2 ) ? (
      outL = dlopL.dlop_eval(inL+Grunge*inL*inL*inL);
      outR = dlopR.dlop_eval(inR+Grunge*inR*inR*inR);
    );
  );

  inL = spl0*preamp;
  inR = spl1*preamp;
  
  sliderCutoff  = cutoffLerp.lerpSample();
  sliderReso    = resoLerp.lerpSample();
  
  s = s + 1;
  ( s > 4 ) ? (
    updateFilter();
    s = 0;
  );

  ( overSampling == 1 ) ? (
    processSample();
    spl0 = outL;
    spl1 = outR;
  ) : (
    upsampleL.updateUpHist(overSampling, inL);
    upsampleR.updateUpHist(overSampling, inR);
  
    f = 0;
    loop(overSampling,
      f += 1;
      inL = overSampling*upsampleL.upSample(overSampling);
      inR = overSampling*upsampleR.upSample(overSampling);
  
      processSample();
      
      downL.updateDownHist(overSampling, outL);
      downR.updateDownHist(overSampling, outR);
      
      ( f == 1 ) ? (
        spl0 = downL.downSample(overSampling);
        spl1 = downR.downSample(overSampling);
      );
    );
  );
  
  spl0 *= inv_preamp;
  spl1 *= inv_preamp;
  
Limit == 1 ? (
  spl0 = min(max(spl0,-0.98),0.98);
  spl1 = min(max(spl1,-0.98),0.98);
);

@gfx 100 200
control_start("main", "bitmap-simple", file);

ui_screen() == "main" ? (
title_desc("Wahriffic", "processing | distortion | exciter");

    ui_split_leftratio(0.3);
        control_group("");
        ui_split_topratio(1/6);
            ui_automate(Model, multipleway_switch(Model, "Weeping Demon 1", 0, 20, 10));
        ui_split_next();
            ui_automate(Model, multipleway_switch(Model, "Weeping Demon 2", 1, 20, 10));
        ui_split_next();
            ui_automate(Model, multipleway_switch(Model, "Crybaby", 2, 20, 10));
        ui_split_next();ui_split_next();
            ui_automate(Inertia, oneway_switch(Inertia, "Inertia", 20, 10));
        ui_split_next();
            ui_automate(Limit, oneway_switch(Limit, "Limit", 20, 10));
        ui_pop();
    ui_pop();
    
    ui_split_leftratio(0.75);
    control_group("");
        ui_split_leftratio(1/4);
            ui_automate(Cutoff, labelled_dial(Cutoff, 1, 0, 1, 0, "cutoff", Cutoff, "%.1f", 50,50,14));
        ui_split_next();
            ui_automate(Resonance, labelled_dial(Resonance, 0, 0, 1, 0, "cutoff2", Resonance, "%.1f", 50,50,14));
        ui_split_next();
            ui_automate(Grunge, labelled_dial(Grunge, 0, 0, 1, 0, "grunge", Grunge, "%.1f", 50,50,14));
        ui_split_next();
            ui_automate(Drive, labelled_dial(Drive, 0, -6, 24, 0, "drive", Drive, "%.1f", 50,50,14));
        ui_pop();
    ui_pop();
    
    control_group("");
    ui_split_topratio(0.7);
        ui_automate(PostGain, labelled_dial(PostGain, 0, -48, 24, 0, "gain", PostGain, "%.1f", 50,50,14)); 
    ui_split_next();
        ui_automate(Oversampling, labelled_dial(Oversampling, 2, 1, 3, 0, "oversample", Oversampling, "%.i", 30,30,14));
    ui_pop();
    

) : ui_screen() == "opts" ? (
  control_navbar("about", -1, -1);

  ui_pad();

  ui_font(#face, 11, 0, 0);
  ui_align(0, -1);
  
  text_height = ui_wraptext("author: saike
Weeping Demon emulation based on code by Chet Gnegy 
(https://ccrma.stanford.edu/~chet/) Crybaby, based on paper: M. Holters et al, 
“Physical modelling of a wah-wah effect pedal as a case study for application 
of the nodal DK method to circuits with variable parts.”, 
Proc. Digital Audio Effects (DAFx-11), Paris, France (2011): 31-35

Warning: Crybaby mode is CPU intensive / high drive needs oversampling x2

editor: JPH
-GUI (using Geraint Luff's API)
-added limiter");
ui_align(.5, -1);
ui_split_rightratio(0.2);
    control_group("");
    slider41 = labelled_dial(slider41, 0, 0, 6, 0, "theme", slider41, "%i", 50,50,14);
ui_pop();

) : ui_system();

ui_interacted() ? needs_slider_update = 1;
