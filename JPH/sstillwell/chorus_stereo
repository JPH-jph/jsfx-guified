// This effect Copyright (C) 2004 and later Cockos Incorporated
// License: GPL - http://www.gnu.org/licenses/gpl.html

desc:Chorus - GUI
desc:Chorus Stereo [Stillwell]
//tags: modulation chorus stereo
//author: Stillwell

//////////////////////////////////////////
import ../ui-lib/ui-lib.jsfx-inc
import ../ui-lib/ui-lib-compat.jsfx-inc
filename:0,../ui-lib/bitmap/theme-dark-orange.png
filename:1,../ui-lib/bitmap/theme-light-orange.png
filename:2,../ui-lib/bitmap/theme-sunny.png
filename:3,../ui-lib/bitmap/theme-retro.png
filename:4,../ui-lib/bitmap/theme-blue.png
filename:5,../ui-lib/bitmap/theme-pattern.png
//////////////////////////////////////////

slider1:15<1,500>-Chorus Length (ms)
slider2:1<1,8,1>-Number Of Voices
slider3:0.5<0,16,0.01>-Rate (Hz) (0=tempo sync)
slider4:0.7<0,1>-Pitch Fudge Factor
slider5:-6<-100,12,1>-Wet Mix (dB)
slider6:-6<-100,12,1>-Dry Mix (dB)
slider7:0.0<-1,1,0.01>-Channel Rate Offset (Hz)
slider8:4<0.0625,4,0.0625>Tempo Sync (fraction of whole note)
slider14:0<0,6,1>-Theme

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
///////////////////////
bufferlength = ceil(srate*1);
buffer0 = 0;
buffer1 = buffer0 + bufferlength;
bufferpeak = buffer1 + bufferlength;
freemem = bufferpeak + bufferlength;
freemem = ui_setup(freemem); // returns the first index it's not using
///////////////////////

bpos=0;

/////////////////////////////////////////
//           @slider code              //
needs_slider_update=1;
function slider_update()
(
needs_slider_update=0;
numvoices=min(16,max(slider2,1));
choruslen=slider1*srate*0.001;

i0=0;
i1=0;
i=0;
loop(numvoices, 
  i0[0]=(i+1)/numvoices*$pi; 
  i1[0]=(i+1)/numvoices*$pi;
  i+=1; 
);
bufofs0=32768;
bufofs1=32768;

csize=choruslen/numvoices * slider4;

wetmix = 2 ^ (slider5/6);
drymix = 2 ^ (slider6/6);

slider14 < 1 ? (
    file=0;
) : slider14 < 2 ? (
    file=1;
) : slider14 < 3 ? (
    file=2;
) : slider14 < 5 ? (
    file=3;
) : slider14 < 6 ? (
    file=4;
) : slider14 < 7 ? (
    file=5;
);

);
//////////////////////////////////////

@slider
// ui:gfx function=custom_gfx_func, height=300

//////////////////////////////////////
@block
needs_slider_update ? slider_update();
//////////////////////////////////////

slider3==0 ? (
  rateadj=tempo/(240*slider8)*2*$pi/srate;
  rateadj0=tempo/(240*slider8)*2*$pi/srate;
  rateadj1=(tempo/(240*slider8)+slider7)*2*$pi/srate;
):(
  rateadj=slider3*2*$pi/srate;
  rateadj0=slider3*2*$pi/srate;
  rateadj1=(slider3+slider7)*2*$pi/srate;
);

@sample

bpos0 >= choruslen ? (
  bpos0=0;
);
os0=spl0;
bpos1 >= choruslen ? (
  bpos1=0;
);
os1=spl1;

// calculate new sample based on numvoices

spl0=spl0*drymix;
spl1=spl1*drymix;
vol=wetmix/numvoices;
i0=0;
i1=0;

loop(numvoices,
   tpos0 = bpos0 - (0.5+0.49*(sin( $pi*(i0[0] += rateadj0))/($pi*i0[0]))) * (i0+1) * csize;
   tpos1 = bpos1 - (0.5+0.49*(sin( $pi*(i1[0] += rateadj1))/($pi*i1[0]))) * (i1+1) * csize;

   tpos0 < 0 ? tpos0 += choruslen;
   tpos1 < 0 ? tpos1 += choruslen;
   tpos0 > choruslen ? tpos0 -= choruslen;
   tpos1 > choruslen ? tpos1 -= choruslen;

   frac0=tpos0-(0|tpos0);
   tpos02=tpos0>=choruslen-1?0:tpos0+1;
   frac1=tpos1-(0|tpos1);
   tpos12=tpos1>=choruslen-1?0:tpos1+1;

   spl0 += (bufofs0[tpos0]*(1-frac0)+bufofs0[tpos02]*frac0) * vol;
   spl1 += (bufofs1[tpos1]*(1-frac1)+bufofs1[tpos12]*frac1) * vol;

   i0+=1;
   i1+=1;
);


bufofs0[bpos0]=os0;
bufofs1[bpos1]=os1;

bpos0+=1;
bpos1+=1;

@gfx 100 200

synctime=slider8*16;

control_start("main", "bitmap-simple", file);

ui_screen() == "main" ? (
title_desc("Chorus", "modulation | chorus | stereo");
ui_split_leftratio(6/8);
        control_group("");
        ui_split_leftratio(1/6);
            ui_automate(slider1, labelled_dial(slider1, 15, 1, 500, 0, "length", slider1, "%i ms", 50,50,14));
        ui_split_next();
            ui_automate(slider2, labelled_dial(slider2,1, 1, 8, 0, "voices", slider2, "%i", 50,50,14));
        ui_split_next();
            ui_automate(slider4, labelled_dial(slider4,0.7, 0, 1, 0, "pitch", slider4, "%.2f", 50,50,14));
        ui_split_next();
            ui_automate(slider3, labelled_dial(slider3, 0.5, 0, 16, 0, "rate", slider3, slider3 == 0 ? ("sync ->") : "%.2f Hz", 50,50,14));
        ui_split_next();
            ui_automate(slider8, labelled_dial(slider8,4, 0.0625, 4, 0, "sync", synctime, "%i / 64", 50,50,14));
        ui_split_next();
            ui_automate(slider7, labelled_dial(slider7,0, -1, 1, 0, "offset", slider7, "%.3f Hz", 50,50,14));
        ui_pop();
    ui_pop();
        control_group("");
        ui_split_leftratio(1/2);
            ui_automate(slider5, labelled_dial(slider5, -6, -60, 24, 0, "wet", slider5, "%i dB", 50,50,14));
        ui_split_next();
            ui_automate(slider6, labelled_dial(slider6, -6, -120, 0, 0, "dry", slider6, "%i dB", 50,50,14));
    ui_pop();
) : ui_screen() == "opts" ? (
  control_navbar("about", -1, -1);

  ui_pad();

  ui_font(#face, 15, 0, 0);
  ui_align(0, -1);
  
  text_height = ui_wraptext("author: Stillwell

editor: JPH
-GUI (using Geraint Luff's API)
");
ui_align(.5, -1);
ui_split_rightratio(0.2);
    control_group("");
    slider14 = labelled_dial(slider14, 0, 0, 6, 0, "theme", slider14, "%i", 50,50,14);
ui_pop();

) : ui_system();

ui_interacted() ? needs_slider_update = 1;
