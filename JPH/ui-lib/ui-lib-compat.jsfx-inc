@init

///////////////////////////ADDED FUNCTIONS JPH///////////////////////////////
function labelled_dial(value, default, low, high, bias, label, formatvalue, format, size, push ,textsize) local (value, default, low, high, bias, label, formatvalue, format, size, push ,textsize) (
  ui_push();
    ui_push_width(size);
      value = control_dial_left(value, low, high, bias);
    ui_pop();
    ui_push_above(push);
      ui_font(#face, textsize, 0, 0);
      ui_text(label);
    ui_pop();
    ui_push_below(push);
      ui_font(#face, textsize, 0, 0);
      value = control_hidden_textnumber(value, formatvalue, format);
    ui_pop();
    ui_click() && ui_clickcount() == 2 ? (
      value = default;
    );
  ui_pop();
  value;
);

function headless_dial(value, default, low, high, bias, label, formatvalue, format, size, push ,textsize) local (value, default, low, high, bias, label, formatvalue, format, size, push ,textsize) (
  ui_push();
    ui_align(-1,0.2);
    ui_push_width(size);
      value = control_dial_left(value, low, high, bias);
    ui_pop();
    ui_push_below(push);
      ui_font(#face, textsize, 0, 0);
      value = control_hidden_textnumber(value, formatvalue, format);
    ui_pop();
    ui_click() && ui_clickcount() == 2 ? (
      value = default;
    );
  ui_pop();
  value;
);

function labelled_meter(value, low, high, bias, label, formatvalue, format, default) local (value, low, high, bias, label, formatvalue, format, default) (
  ui_push();
    ui_align(-1,0.4);
    ui_push_width(270);
    ui_push_height(20);
      value = control_slider_left(value, low, high, bias);
    ui_pop();
    ui_pop();
    ui_push_width(270);
        ui_split_leftratio(1/3);
        uix_control_color_from_theme(151, 30);
        ui_align(1,-1);
          ui_text("|");
      ui_split_next();
            uix_control_color_from_theme(151, 30);
        ui_align(1,-1);
          ui_text("|");
      ui_pop();
    ui_pop();
    ui_push_below(30);
      value = control_hidden_textnumber(value, formatvalue, format);
    ui_pop();
    ui_click() && ui_clickcount() == 2 ? (
      value = default;
    );
  ui_pop();
  value;
);

function notlabelled_meter(value, low, high, bias, label, formatvalue, format, default) local (value, low, high, bias, label, formatvalue, format, default) (
  ui_push();
    ui_align(-1,0.98);
    ui_push_width(270);
        ui_push_height(20);
                    value = control_slider_left(value, low, high, bias);
        ui_pop();
    ui_pop();
    ui_push_width(270);
        ui_split_leftratio(1/3);
        uix_control_color_from_theme(151, 30);
        ui_align(1,-1);
          ui_text("|");
      ui_split_next();
            uix_control_color_from_theme(151, 30);
        ui_align(1,-1);
          ui_text("|");
      ui_pop();
    ui_pop();
    ui_click() && ui_clickcount() == 2 ? (
      value = default;
    );
  ui_pop();
  value;
);

function bottomless_slider(value, default, low, high, bias, label, formatvalue, format, size, textsize) local (value, default, low, high, bias, label, formatvalue, format, size, textsize) (
  ui_align(-1,0.5);
  ui_push();
    ui_push_height(20);
    ui_push_width(size);
      value = control_slider_left(value, low, high, bias);
    ui_pop();ui_pop();
        uix_control_color_from_theme(151, 30);
      ui_font(#face, textsize, 0, 0);
      ui_text(label);
    ui_click() && ui_clickcount() == 2 ? (
      value = default;
    );
  ui_pop();
  value;
);

function labelled_switch(value, label0, label1) local (value, label0, label1) (
       ui_push_height(15);
       ui_align(.9,1);
              ui_push_width(30);
                     value = control_switch(value);
              ui_pop();
       ui_pop();
       ui_font(#face, 10, 0, 0);
       ui_align(0.3,-1);
       value == 0 ? (
                    ui_text(label0);
       ) : (
                    ui_text(label1);
       );
       value;
);

function labelled_switch_mid(value, label0, label1) local (value, label0, label1) (
       ui_push_height(15);
       ui_align(.75,1);
              ui_push_width(30);
                     value = control_switch(value);
              ui_pop();
       ui_pop();
       ui_font(#face, 10, 0, 0);
       ui_align(0.25,-1);
       value == 0 ? (
                    ui_text(label0);
       ) : (
                    ui_text(label1);
       );
       value;
);

function multipleway_switch(sliddy, text, vali, size, textsize) local (sliddy, text, vali, size, textsize) (
       ui_push_height(size);
          ui_align(0.9,-1);
              ui_push_width(size);
                sliddy = control_radio(sliddy, vali);
              ui_pop();
      ui_pop();
             ui_align(0,-1);
             ui_font(#face, textsize, 0, 0);
             ui_text(text);
      sliddy;
);

function multipleway_switch_mid(sliddy, text, vali, size, textsize) local (sliddy, text, vali, size, textsize) (
       ui_push_height(size);
          ui_align(0.9,-1);
              ui_push_width(size);
                sliddy = control_radio(sliddy, vali);
              ui_pop();
      ui_pop();
             ui_align(0.5,-1);
             ui_font(#face, textsize, 0, 0);
             ui_text(text);
      sliddy;
);

function multipleway_switch_sp(sliddy, text, vali, size, textsize) local (sliddy, text, vali, size, textsize) (
ui_align(-1,.7);
    ui_push_height(size);
              ui_push_width(size);
                sliddy = control_radio(sliddy, vali);
              ui_pop();
      ui_pop();
             //ui_align(0.5,0.3);
             ui_color(0, 0, 0, 0.5);
             ui_font(#face, textsize, 0, 0);
             ui_text(text);
      sliddy;
);

function oneway_switch(value, text, size, textsize) local(state, value, text, size, textsize) (
  ui_click() ? (
    value = !value;
    uix_undo_point();
  );

   ui_push_height(size);
      ui_align(0.9,-1);
          ui_push_width(size);

      control_background_inset();
      control_finish_inset();

      state = control_state();
      value == !option_value ? (
        ui_pad(2, 2);
        control_background_enabled(state);
        control_finish_enabled(state);
      );
      ui_pop();
    ui_pop();
        ui_align(0,-1);
        ui_font(#face, textsize, 0, 0);
        ui_text(text);
  value;
);

function oneway_switch_mid(value, text, size, textsize) local(state, value, text, size, textsize) (
  ui_click() ? (
    value = !value;
    uix_undo_point();
  );

   ui_push_height(size);
      ui_align(0.9,-1);
          ui_push_width(size);

      control_background_inset();
      control_finish_inset();

      state = control_state();
      value == !option_value ? (
        ui_pad(2, 2);
        control_background_enabled(state);
        control_finish_enabled(state);
      );
      ui_pop();
    ui_pop();
        ui_align(0.3,-1);
        ui_font(#face, textsize, 0, 0);
        ui_text(text);
  value;
);

function oneway_switch_midb(value, text, size, textsize) local(state, value, text, size, textsize) (
  ui_click() ? (
    value = !value;
    uix_undo_point();
  );

   ui_push_height(size);
      ui_align(0.5,0.5);
          ui_push_width(size);

      control_background_inset();
      control_finish_inset();

      state = control_state();
      value == !option_value ? (
        ui_pad(2, 2);
        control_background_enabled(state);
        control_finish_enabled(state);
      );
      ui_pop();
    ui_pop();
        ui_push_below(30);
        ui_font(#face, textsize, 0, 0);
        ui_text(text);
    ui_pop();
  value;
);

function oneway_switch_sp(value, text, size, textsize) local(state, value, text, size, textsize) (
  ui_click() ? (
    value = !value;
    uix_undo_point();
  );
   ui_align(-1,1);
   ui_push_height(size);
          ui_push_width(size);

      control_background_inset();
      control_finish_inset();

      state = control_state();
      value == !option_value ? (
        ui_pad(2, 2);
        control_background_enabled(state);
        control_finish_enabled(state);
      );
      ui_pop();
    ui_pop();
  value;
);

function labelled_slider(value, default, low, high, bias, label, displayformat, format, height, width, textsize1, textsize2) local (value, default, low, high, bias, label, displayformat, format, height, width, textsize1, textsize2) (
    ui_push();
        ui_push_height(height);
            ui_push_width(width);
                value = control_slider_y(value, low, high, bias);
            ui_pop();ui_pop();
        ui_push_above(130);
                ui_font(#face, textsize1, 0, 0);
                ui_text(label);
            ui_pop();
        ui_push_below(130);
                ui_font(#face, textsize2, 0, 0);
                value = control_hidden_textnumber(value, displayformat, format);
            ui_pop();
        ui_click() && ui_clickcount() == 2 ? (
            value = default;
        );
  ui_pop();
  value;
);

function control_selector2(value, text, next_value, prev_value) local(buttonwidth) (
	ui_push_height(ui_texth() + 2*ui_padding_y());
    ui_push_width(ui_width()-20);
		control_background_inset();
		buttonwidth = min(ui_height()/2, ui_width()/2);

		ui_halign() <= 0.5 ? ui_split_left(buttonwidth) : ui_split_right(buttonwidth);
			ui_color(255, 255, 255, 0.8);
			ui_split_topratio(0.5);
				next_value != value ? control_background_enabled() : control_background_disabled();
				ui_text("↑");
				next_value != value ? control_finish_enabled() : control_finish_disabled();
				ui_click() ? (
					value = next_value;
					uix_undo_point(1);
					ui_click_clear();
				);
			ui_split_next();
				prev_value != value ? control_background_enabled() : control_background_disabled();
				ui_text("↓");
				prev_value != value ? control_finish_enabled() : control_finish_disabled();
				ui_click() ? (
					value = prev_value;
					uix_undo_point(1);
					ui_click_clear();
				);
			ui_pop();
		ui_pop();

		ui_push();
			ui_padleft();
			ui_padright();
            ui_text(text);
		ui_pop();

		control_finish_inset();
	ui_pop();
    ui_pop();
	value;
);

function title_desc (text1, text2) local (text1, text2) (
control_group("");
    ui_split_topratio(3/20);
        ui_split_leftratio(1/3);
                ui_text(text2);
            ui_split_next();
                ui_font(#face, 20, 1, 0);
                ui_text(text1);
            ui_split_next();
                ui_split_rightratio(0.23);
                    ui_push_height(22);
                        ui_push_width(35);
                        control_button("→") ? (
                        ui_screen_open("opts"););
                        ui_pop();
                    ui_pop();
                ui_pop();
            ui_pop();
    ui_pop();
);

function normalize_range(slider, newmin, newmax, oldmin, oldmax) local (slider, newmin, newmax, oldmin, oldmax)(
value = (newmax - newmin) / (oldmax - oldmin)*(slider - oldmax) + newmax;
);

function draw_hp(fsl, dbs, rsl, fslmin, fslmax, rslmin, rslmax) local (fsl, dbs, rsl, fslmin, fslmax, rslmin, rslmax, left, right, bottom, height, width) (
//colors
uix_control_color_from_theme(120, 30);
ui_fill();
uix_control_color_from_theme(151, 30);
 

//bounds
left=ui_left();
right=ui_right();
bottom=ui_bottom();
height=ui_height();
height=bottom-height/2;
width=ui_width();

//draw
    gfx_x=right; gfx_y=height;

    freqscale = normalize_range(fsl,width*.01,width*1,fslmin,fslmax);
    dbscale = (1/dbs)*1000;
    resscale = normalize_range(rsl,height*.01,height*.3,rslmin,rslmax);
    
    line1x=left+freqscale;
    line1y=height-resscale;
    line2x=left+freqscale-dbscale;
    
    line2x < left ? ( //limit left side
        line2x = left;
    );
    
    line1x+resscale > right ? ( //limit right side
    gfx_lineto(right,height);
    ) : gfx_lineto(line1x+resscale,height);

    gfx_lineto(line1x,line1y);
    gfx_lineto(line2x,bottom);
control_finish_technical();
ui_border();  
);

function draw_lp(fsl, dbs, rsl, fslmin, fslmax, rslmin, rslmax) local (fsl, dbs, rsl, fslmin, fslmax, rslmin, rslmax, left, right, bottom, height, width) (
//colors
uix_control_color_from_theme(120, 30);
ui_fill();
uix_control_color_from_theme(151, 30);
  

//bounds
left=ui_left();
right=ui_right();
bottom=ui_bottom();
height=ui_height();
height=bottom-height/2;
width=ui_width();

//draw
    gfx_x=left; gfx_y=height;

    freqscale = normalize_range(fsl,width*.01,width*1,fslmin,fslmax);
    dbscale = (1/dbs)*1000;
    resscale = normalize_range(rsl,height*.01,height*.3,rslmin,rslmax);
    
    line1x=left+freqscale;
    line1y=height-resscale;
    line2x=left+freqscale+dbscale;
    
    line2x > right ? ( //limit left side
        line2x = right;
    );
    
    line1x-resscale < left ? ( //limit right side
    gfx_lineto(left,height);
    ) : gfx_lineto(line1x-resscale,height);

    gfx_lineto(line1x,line1y);
    gfx_lineto(line2x,bottom);
    
control_finish_technical();
ui_border();  
);

function draw_bp(fsl, dbs, rsl, fslmin, fslmax, rslmin, rslmax) local (fsl, dbs, rsl, fslmin, fslmax, rslmin, rslmax, left, right, bottom, height, width) (
//colors
uix_control_color_from_theme(120, 30);
ui_fill();
uix_control_color_from_theme(151, 30);  

//bounds
left=ui_left();
right=ui_right();
bottom=ui_bottom();
height=ui_height();
height=bottom-height/2;
width=ui_width();

//draw
    gfx_x=left; gfx_y=bottom;

    freqscale = normalize_range(fsl,width*.01,width*1,fslmin,fslmax);
    dbscale = (1/dbs)*1000;
    resscale = normalize_range(rsl,height*.01,height*.3,rslmin,rslmax);
    
    line1x=left+freqscale;
    line1y=bottom-resscale*2;
    line2x=right;
    line3x=left+freqscale+resscale;
    
    line3x > right ? ( //limit left side
        line3x = right;
    );
    
    line1x-resscale < left ? ( //limit right side
    gfx_lineto(left,bottom);
    ) : gfx_lineto(line1x-resscale,bottom);

    gfx_lineto(line1x,line1y);
    gfx_lineto(line3x,bottom);
    gfx_lineto(line2x,bottom);
    
control_finish_technical();
ui_border(); 
);

function draw_bp2(fsl, dbs, rsl, fslmin, fslmax, rslmin, rslmax) local (fsl, dbs, rsl, fslmin, fslmax, rslmin, rslmax, left, right, bottom, height, width) (
//colors
uix_control_color_from_theme(120, 30);
ui_fill();
uix_control_color_from_theme(151, 30);   

//bounds
left=ui_left();
right=ui_right();
bottom=ui_bottom();
height=ui_height();
height=bottom-height/2;
width=ui_width();

//draw
    freqscale = normalize_range(fsl,width*.01,width*1,fslmin,fslmax);
    dbscale = (1/dbs)*1000;
    resscale = normalize_range(rsl,height*.01,height*.3,rslmin,rslmax);

    resscale = (20/rsl);
    
    line1x=left+freqscale;
    line1y=height;
    line2x=right;
    line3x=left+freqscale+resscale;
    line2y=bottom-rescale;
    
    line3x > right ? ( //limit left side
        line3x = right;
    );
    
    line1y < height ? (
        line1y = height;
    );
    
    line2y < height ? (
        line2y = height;
    );
    
    gfx_x=left; gfx_y=line2y;
    resscale == 0 ? (
    gfx_lineto(line1x,height);
    gfx_lineto(right,bottom);
        
    ) : (
    line1x-resscale < left ? ( //limit right side
    gfx_lineto(left,line2y);
    ) : gfx_lineto(line1x-resscale,line2y);
    
    gfx_lineto(line1x,line1y);
    gfx_lineto(line3x,line2y);
    gfx_lineto(line2x,line2y););
    
control_finish_technical();
ui_border(); 
);

function draw_notch(fsl, dbs, rsl, fslmin, fslmax, rslmin, rslmax) local (fsl, dbs, rsl, fslmin, fslmax, rslmin, rslmax, left, right, bottom, height, width) (
//colors
uix_control_color_from_theme(120, 30);
ui_fill();
uix_control_color_from_theme(151, 30); 

//bounds
left=ui_left();
right=ui_right();
bottom=ui_bottom();
height=ui_height();
height=bottom-height/2;
width=ui_width();

//draw
    gfx_x=left; gfx_y=height;

    freqscale = normalize_range(fsl,width*.01,width*1,fslmin,fslmax);
    dbscale = (1/dbs)*1000;
    resscale = normalize_range(rsl,height*.01,height*.3,rslmin,rslmax);
    
    line1x=left+freqscale;
    line1y=height+resscale*1.5;
    line2x=right;
    line3x=left+freqscale+resscale;
    
    line3x > right ? ( //limit left side
        line3x = right;
    );
    
    line1x-resscale < left ? ( //limit right side
    gfx_lineto(left,height);
    ) : gfx_lineto(line1x-resscale,height);

    gfx_lineto(line1x,line1y);
    gfx_lineto(line3x,height);
    gfx_lineto(line2x,height);
    
control_finish_technical();
ui_border(); 
);

function draw_notch2(fsl, dbs, rsl, fslmin, fslmax, rslmin, rslmax) local (fsl, dbs, rsl, fslmin, fslmax, rslmin, rslmax, left, right, bottom, height, width) (
//colors
uix_control_color_from_theme(120, 30);
ui_fill();
uix_control_color_from_theme(151, 30);   

//bounds
left=ui_left();
right=ui_right();
bottom=ui_bottom();
height=ui_height();
height=bottom-height/2;
width=ui_width();

//draw
    gfx_x=left; gfx_y=height;

    freqscale = normalize_range(fsl,width*.01,width*1,fslmin,fslmax);
    dbscale = (1/dbs)*1000;
    resscale = normalize_range(rsl,height*.01,height*.3,rslmin,rslmax);
    
    rsl < 0.2 ? (
        resscale = height/2;
    ) : resscale = (height/rsl)/10;
    
    line1x=left+freqscale;
    line1y=height+resscale;
    
    line1y > bottom ? (//limit bottom
        line1y=bottom;
    );
    
    line2x=right;
    line3x=left+freqscale+resscale;
    
    line3x > right ? ( //limit left side
        line3x = right;
    );
    
    line1x-resscale < left ? ( //limit right side
    gfx_lineto(left,height);
    ) : gfx_lineto(line1x-resscale,height);
    

    gfx_lineto(line1x,line1y);
     gfx_lineto(line3x,height);
     gfx_lineto(line2x,height);
     
control_finish_technical();
ui_border(); 
);

function draw_notch4(fsl, dbs, rsl, fslmin, fslmax, dbsmin, dbsmax, rslmin, rslmax) local (fsl, dbs, rsl, fslmin, fslmax, dbsmin, dbsmax, rslmin, rslmax, left, right, bottom, height, width) (  
//bounds
left=ui_left();
right=ui_right();
bottom=ui_bottom();
height=ui_height();
height=bottom-height/2;
width=ui_width();

//draw
    gfx_x=left; gfx_y=height;

    freqscale = normalize_range(fsl,width*.01,width*1,fslmin,fslmax);
    resscale = normalize_range(rsl,height*.01,height*.3,rslmin,rslmax);
    dbsscale = normalize_range(dbs,height*.01,height*.3,dbsmin,dbsmax);
    dbsscale = 1/dbsscale;
    
    line1x=left+freqscale-dbsscale*20;
    line1y=height+resscale;
    line2x=right;
    line3x=left+freqscale+dbsscale*2;
    line4x=left+freqscale+dbsscale*20;
    
    line3x > right ? ( //limit left side
        line3x = right;
    );
    
    line4x > right ? ( //limit left side
        line4x = right;
    );
    
    line1x < left ? ( //limit right side
    gfx_lineto(left,height);
    ) : gfx_lineto(line1x,height);

    gfx_lineto(line3x,line1y);
    gfx_lineto(line4x,height);
    gfx_lineto(line2x,height);
    
control_finish_technical();
ui_border(); 
);

function draw_allpass(fsl, dbs, rsl, fslmin, fslmax, rslmin, rslmax) local (fsl, dbs, rsl, fslmin, fslmax, rslmin, rslmax, left, right, bottom, height, width) (
//colors
uix_control_color_from_theme(120, 30);
ui_fill();
uix_control_color_from_theme(151, 30);   

//bounds
left=ui_left();
right=ui_right();
bottom=ui_bottom();
height=ui_height();
height=bottom-height/2;
width=ui_width();

//draw
    gfx_x=left; gfx_y=height;

    freqscale = normalize_range(fsl,width*.01,width*1,fslmin,fslmax);
    dbscale = (1/dbs)*1000;
    resscale = normalize_range(rsl,height*.01,height*.3,rslmin,rslmax);
    
    line1x=left+freqscale;
    line1y=height+resscale;
    line2x=right;
    line2y=height-resscale;
    line3x=left+freqscale+resscale;
    
    line3x > right ? ( //limit left side
        line3x = right;
    );
    
    line1x-resscale < left ? ( //limit right side
    gfx_lineto(left,height);
    ) : gfx_lineto(line1x-resscale,height);

    gfx_lineto(line1x,line2y);
    gfx_lineto(line1x,line1y);
    gfx_lineto(line3x,height);
    gfx_lineto(line2x,height);
    
control_finish_technical();
ui_border(); 
);

function draw_peak(fsl, dbs, rsl, fslmin, fslmax, dbsmin, dbsmax, rslmin, rslmax) local (fsl, dbs, rsl, fslmin, fslmax, dbsmin, dbsmax, rslmin, rslmax, left, right, bottom, height, width) (
//colors
uix_control_color_from_theme(120, 30);
ui_fill();
uix_control_color_from_theme(151, 30);

//bounds
left=ui_left();
right=ui_right();
bottom=ui_bottom();
height=ui_height();
height=bottom-height/2;
width=ui_width();

//draw
    freqscale = normalize_range(fsl,width*.01,width*1,fslmin,fslmax);
    dbscale = normalize_range(dbs,height*.01,height*.3,dbsmin,dbsmax);
    resscale = normalize_range(rsl,height*.01,height*.3,rslmax, rslmin);
    
    dbs == 0 ? (
        dbscale = 0;
    );
    
    gfx_x=left; gfx_y=height;

    line1x=left+freqscale;
    line1y=height;
    line2x=right;
    line3x=left+freqscale+resscale*2;
    
    line3x > right ? ( //limit left side
        line3x = right;
    );
    
    line1x-resscale*2 < left ? ( //limit right side
    gfx_lineto(left,height);
    ) : gfx_lineto(line1x-resscale*2,height);

    gfx_lineto(line1x,line1y-dbscale);
    gfx_lineto(line3x,height);
    gfx_lineto(line2x,height);
    
control_finish_technical();
ui_border(); 
);

function draw_lsf(fsl, dbs, rsl, fslmin, fslmax, dbsmin, dbsmax, rslmin, rslmax) local (fsl, dbs, rsl, fslmin, fslmax, dbsmin, dbsmax, rslmin, rslmax, left, right, bottom, height, width) (
//colors
uix_control_color_from_theme(120, 30);
ui_fill();
uix_control_color_from_theme(151, 30); 

//bounds
left=ui_left();
right=ui_right();
bottom=ui_bottom();
height=ui_height();
height=bottom-height/2;
width=ui_width();

//draw
    gfx_x=right; gfx_y=height;

    freqscale = normalize_range(fsl,width*.01,width*1,fslmin,fslmax);
    dbscale = normalize_range(dbs,height*.01,height*.3,dbsmin,dbsmax);
    resscale = normalize_range(rsl,height*.01,height*.3,rslmin,rslmax);
    dbs == 0 ? (
        dbscale = 0;
    );
    
    line1x=left+freqscale;
    line1y=height+dbscale;
    
    line1x+resscale > right ? ( //limit right side
    gfx_lineto(right,height);
    ) : gfx_lineto(line1x+resscale,height);
    gfx_lineto(line1x,height-dbscale);
    gfx_lineto(left,height-dbscale);

control_finish_technical();
ui_border(); 
);

function draw_hsf(fsl, dbs, rsl, fslmin, fslmax, dbsmin, dbsmax, rslmin, rslmax) local (fsl, dbs, rsl, fslmin, fslmax, dbsmin, dbsmax, rslmin, rslmax, left, right, bottom, height, width) (
//colors
uix_control_color_from_theme(120, 30);
ui_fill();
uix_control_color_from_theme(151, 30);   

//bounds
left=ui_left();
right=ui_right();
bottom=ui_bottom();
height=ui_height();
height=bottom-height/2;
width=ui_width();

//draw
    gfx_x=left; gfx_y=height;

    freqscale = normalize_range(fsl,width*.01,width*1,fslmin,fslmax);
    dbscale = normalize_range(dbs,height*.01,height*.3,dbsmin,dbsmax);
    resscale = normalize_range(rsl,height*.01,height*.3,rslmin,rslmax);
    dbs == 0 ? (
        dbscale = 0;
    );
    
    line1x=left+freqscale;
    line1y=height+dbscale;
    
  
    line1x-resscale < left ? ( //limit right side
    gfx_lineto(left,height);
    ) : gfx_lineto(line1x-resscale,height);
    
    gfx_lineto(line1x,height-dbscale);
    gfx_lineto(right,height-dbscale);

control_finish_technical();
ui_border(); 
);

function draw_wavescopeinit() (
histbuf=1000000;
histpos=0;
histsize=50/1000*srate|0;
);

function draw_wavescopesample() (
histbuf[histpos]=spl0;
histbuf[histpos+histsize]=spl1;
histpos+=1;
histpos >= histsize ? histpos=0;
);

function draw_wavescope() local (offs, gscale, gbuf, gscale2, ga, gv, gx, gy, width, height, left, top) (

top = ui_top();
width = ui_width();
height = ui_height();
left = ui_left();

offs=histpos;
gscale=width/histsize;
gbuf=histbuf;
gscale2=height/4;

gfx_x=left;
gfx_y=top+height/2;

ga=0;
loop(histsize,
gv=gbuf[offs];
offs+=1;
offs>=histsize?offs=0;
gx=left+ga*gscale;
gy=top+height/2 + gv*gscale2;
ga ? gfx_lineto(gx,gy,0) : ( gfx_x=gx; gfx_y=gy; );
ga+=1;
);

gbuf+=histsize;
control_finish_technical();
ui_border(); 
);
