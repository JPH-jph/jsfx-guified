desc:Colored noise generator - GUI
//tags: analysis generator synthesis
//author: Tale

// Copyright (C) 2014-2019 Theo Niessink
// License: LGPL - http://www.gnu.org/licenses/lgpl.html

// This effect generates different "colors" of noise. Apart from the listed
// colors it can also generate "black" noise. To do so select white noise
// and lower the density. Note that density affects only white noise, and is
// ignored for other colors.

//////////////////////////////////////////
import ../ui-lib/ui-lib.jsfx-inc
import ../ui-lib/ui-lib-compat.jsfx-inc
filename:0,../ui-lib/bitmap/theme-dark-orange.png
filename:1,../ui-lib/bitmap/theme-light-orange.png
filename:2,../ui-lib/bitmap/theme-sunny.png
filename:3,../ui-lib/bitmap/theme-retro.png
filename:4,../ui-lib/bitmap/theme-blue.png
filename:5,../ui-lib/bitmap/theme-pattern.png
//////////////////////////////////////////

slider1:2<0,5,1{Brown,Pink,White,Blue,Violet,Grey}>-Color
slider2:1.0<0.0,1.0,0.001>-Density
slider3:0<0,1,1{Mono,Stereo}>-Mode
slider4:0.0<-150.0,24.0,0.1>-Dry (dB)
slider5:-24.0<-150.0,24.0,0.1>-Wet (dB)
slider6:0<0,4,1{Bypass,Low-Pass,Band-Pass,High-Pass,Notch>-Filter
slider7:1000.0<20.0,20000.0,1.0>-Cutoff (Hz)
slider8:2.0<0.01,8.0,0.1>-Q
slider14:0<0,6,1>-Theme

in_pin:Left
in_pin:Right

out_pin:Left
out_pin:Right

import noise.jsfx-inc
import rc_filter.jsfx-inc
import zdf_filter.jsfx-inc

@init
///////////////////////
bufferlength = ceil(srate*1);
buffer0 = 0;
buffer1 = buffer0 + bufferlength;
bufferpeak = buffer1 + bufferlength;
freemem = bufferpeak + bufferlength;
freemem = ui_setup(freemem); // returns the first index it's not using
///////////////////////

function pow4(x) ( x*x*x*x );
function cache(x) ( x != this ? ( this = x; 1; ); );

function gain(db, inf)
(
  db <= inf ? 0 : exp(/* log(10)/20 */ 0.11512925464970228 * db);
);

smooth.rc_set(0.0033);

function smooth()
(
  smooth.lp = this.smooth;
  this.smooth = smooth.rc_lp(this);
);

min_inf = -150.0;
dry.smooth = gain(slider4, min_inf);
wet.smooth = gain(slider5, min_inf);

// rms = 0;
rms[0] = 0.075;
rms[1] = 1/3;
rms[2] = 1;
rms[3] = 0.56;
rms[4] = sqrt(0.5);
rms[5] = 0.125;

ratio = 6;
ratio[3] = srate * 1/44100;
ratio[5] =
ratio[2] = sqrt(ratio[3]);
ratio[4] = ratio[2] * ratio[3];
ratio[0] = 1 / ratio[2];
ratio[1] = 1;

/////////////////////////////////////////
//           @slider code              //
needs_slider_update=1;
function slider_update()
(
needs_slider_update=0;
color = slider1|0;
gain = rms[color] * ratio[color];

rng0.lcg_density(color < 0 || color > 5 ? 0 : pow4(slider2));
rng1.lcg_density(rng0.density);

stereo.cache(slider3 >= 0.5) ? (
  rng0.lcg_init(2147483646);
  stereo ? rng1.lcg_init(1518500249);
);

dry = gain(slider4, min_inf);
wet = gain(slider5, min_inf);

filter = max(slider6|0, 0);
filter > 4 ? filter = 0;

filter ? (
  fc = max(20, slider7);
  q = max(0.01, slider8);

  filter == 1 ? zdf0.zdf_lp(fc, q) :
  filter == 2 ? zdf0.zdf_bp(fc, q) :
  filter == 3 ? zdf0.zdf_hp(fc, q) :
  /* filter == 4 ? */ zdf0.zdf_bs(fc, q);

  stereo ? (
    zdf1.cb = zdf0.cb; zdf1.ch = zdf0.ch; zdf1.cl = zdf0.cl;
    zdf1.g = zdf0.g; zdf1.h = zdf0.h; zdf1.r2 = zdf0.r2;
  );
);

slider14 < 1 ? (
    file=0;
) : slider14 < 2 ? (
    file=1;
) : slider14 < 3 ? (
    file=2;
) : slider14 < 5 ? (
    file=3;
) : slider14 < 6 ? (
    file=4;
) : slider14 < 7 ? (
    file=5;
);

);
//////////////////////////////////////

@slider
// ui:gfx function=custom_gfx_func, height=300

//////////////////////////////////////
@block
needs_slider_update ? slider_update();
//////////////////////////////////////


@sample

color == 0 ? (
  left = rng0.lcg_brown();
  stereo ? right = rng1.lcg_brown();
) :

color == 1 ? (
  left = rng0.lcg_pink();
  stereo ? right = rng1.lcg_pink();
) :

color == 3 ? (
  left = rng0.lcg_blue();
  stereo ? right = rng1.lcg_blue();
) :

color == 4 ? (
  left = rng0.lcg_violet();
  stereo ? right = rng1.lcg_violet();
) :

color == 5 ? (
  left = rng0.lcg_grey();
  stereo ? right = rng1.lcg_grey();
) :

/* color == 2 ? */ (
  left = rng0.lcg_black();
  stereo ? right = rng1.lcg_black();
);

left *= gain;
stereo ? right *= gain : right = left;

filter ? (
  left = zdf0.zdf_svf(left);
  right = stereo ? zdf1.zdf_svf(right) : left;
);

spl0 = dry.smooth() * spl0 + wet.smooth() * left;
spl1 = dry.smooth * spl1 + wet.smooth * right;

@gfx 700 250

control_start("main", "bitmap-simple", file);

ui_screen() == "main" ? (
title_desc("Colored noise generator", "generator | synthesis");

        ui_split_leftratio(.2);
            control_group("");
            ui_split_topratio(1/9);
                ui_automate(slider1, multipleway_switch(slider1, "Brown", 0, 20, 12));
            ui_split_next();
                ui_automate(slider1, multipleway_switch(slider1, "Pink", 1, 20, 12));
            ui_split_next();
                ui_automate(slider1, multipleway_switch(slider1, "White", 2, 20, 12));
            ui_split_next();
                ui_automate(slider1, multipleway_switch(slider1, "Blue", 3, 20, 12));
            ui_split_next();
                ui_automate(slider1, multipleway_switch(slider1, "Violet", 4, 20, 12));
            ui_split_next();
                ui_automate(slider1, multipleway_switch(slider1, "Grey", 5, 20, 12));
            ui_pop();
                ui_automate(slider2, labelled_dial(slider2, 1, 0, 1, 0, "density", slider2, "%.3f", 30,30,12)); 
        ui_pop();

                control_group("");
                ui_split_leftratio(0.3);
                control_group("");
                    ui_split_topratio(1/8);
                        ui_automate(slider6, multipleway_switch(slider6, "off", 0, 20, 12));
                    ui_split_next();
                        ui_automate(slider6, multipleway_switch(slider6, "lp", 1, 20, 12));
                    ui_split_next();
                        ui_automate(slider6, multipleway_switch(slider6, "bp", 2, 20, 12));
                    ui_split_next();
                        ui_automate(slider6, multipleway_switch(slider6, "hp", 3, 20, 12));
                    ui_split_next();
                        ui_automate(slider6, multipleway_switch(slider6, "notch", 4, 20, 12));
                    ui_pop();
                    ui_automate(slider3, labelled_switch(slider3, "mono", "stereo"));
                ui_pop();
                
                ui_split_leftratio(0.6);
                    ui_split_topratio(1/2);
                        uix_control_color_from_theme(120, 30);
                        ui_fill();
                        uix_control_color_from_theme(151, 30);
                        ui_border();
                        uix_control_color_from_theme(151, 30);
                        
                        slider6 == 1 ? (
                        draw_lp(slider7,slider8, 33000, 16);
                        ) : slider6 == 2 ? (
                        draw_bp(slider7,slider8, 33000, 16);
                        ) : slider6 == 3 ? (
                        draw_hp(slider7,slider8, 33000, 16);
                        ) : slider6 == 4 ? (
                        draw_notch(slider7,slider8, 33000, 16);
                        );
                        
                    ui_split_next();
                    
                        ui_split_leftratio(1/2);
                            ui_automate(slider7, labelled_dial(slider7, 1000, 20, 20000, 0, "cutoff", slider7, "%i Hz", 40,40,12));
                        ui_split_next("");
                            ui_automate(slider8, labelled_dial(slider8, 2, .1, 8, 0, "q", slider8, "%.1f", 40,40,12));
                        ui_pop();
                    
                    
                    ui_pop();
                ui_pop();

                control_group("");
                ui_split_leftratio(1/2);
                    ui_automate(slider4, labelled_dial(slider4, 0, -150, 24, 0, "dry", slider4, "%i dB", 50,50,14));
                ui_split_next();
                    ui_automate(slider5, labelled_dial(slider5, -24, -150, 24, 0, "wet", slider5, "%i dB", 50,50,14));
                ui_pop();
            ui_pop();
) : ui_screen() == "opts" ? (
  control_navbar("about", -1, -1);

  ui_pad();

  ui_font(#face, 14, 0, 0);
  ui_align(0, -1);
  
  text_height = ui_wraptext("author: Tale

This effect generates different colors of noise. Apart from the listed
colors it can also generate black noise. To do so select white noise
and lower the density. Note that density affects only white noise, and is
ignored for other colors.

editor: JPH
-GUI (using Geraint Luff's API)
note: the filter representation may not be the real filter shape
I added it just for fun");
ui_align(.5, -1);
ui_split_rightratio(0.2);
    control_group("");
    slider14 = labelled_dial(slider14, 0, 0, 6, 0, "theme", slider14, "%i", 50,50,14);
ui_pop();

) : ui_system();

ui_interacted() ? needs_slider_update = 1;
